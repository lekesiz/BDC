name: BDC CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ubuntu-latest
    services:
      redis:
        image: redis
        ports:
          - 6379:6379
        options: --health-cmd "redis-cli ping" --health-interval 10s --health-timeout 5s --health-retries 5
      
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
        
    - name: Install dependencies
      working-directory: ./server
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-test.txt
        
    - name: Run tests
      working-directory: ./server
      run: |
        bash run_tests.sh
      env:
        FLASK_ENV: testing
        
    - name: Upload test coverage
      uses: actions/upload-artifact@v3
      with:
        name: coverage-report
        path: server/coverage_html/
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        directory: server/coverage_html
        flags: backend
        name: codecov-coverage-backend
        
  lint:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
        
    - name: Install linting tools
      run: |
        python -m pip install --upgrade pip
        pip install flake8 black isort
        
    - name: Lint Python code
      working-directory: ./server
      run: |
        flake8 app tests
        black --check app tests
        isort --check-only app tests
        
    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
        
    - name: Install frontend dependencies
      working-directory: ./client
      run: npm ci
      
    - name: Lint JavaScript code
      working-directory: ./client
      run: |
        npm run lint
        
  build:
    runs-on: ubuntu-latest
    needs: [test, lint]
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
      
    - name: Login to Container Registry
      uses: docker/login-action@v2
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Build and push Server Docker image
      uses: docker/build-push-action@v4
      with:
        context: ./server
        file: ./docker/Dockerfile.server
        push: true
        tags: |
          ghcr.io/${{ github.repository }}/bdc-server:${{ github.sha }}
          ghcr.io/${{ github.repository }}/bdc-server:latest
          
    - name: Build and push Client Docker image
      uses: docker/build-push-action@v4
      with:
        context: ./client
        file: ./docker/Dockerfile.client
        push: true
        tags: |
          ghcr.io/${{ github.repository }}/bdc-client:${{ github.sha }}
          ghcr.io/${{ github.repository }}/bdc-client:latest
          
  deploy-dev:
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'push' && github.ref == 'refs/heads/develop'
    environment: development
    steps:
    - uses: actions/checkout@v3
    
    - name: Setup SSH
      uses: webfactory/ssh-agent@v0.8.0
      with:
        ssh-private-key: ${{ secrets.DEV_SSH_KEY }}
    
    - name: Deploy to Development
      env:
        DEV_HOST: ${{ secrets.DEV_HOST }}
        DEV_USER: ${{ secrets.DEV_USER }}
        DEV_DIR: ${{ secrets.DEV_DIR }}
        GITHUB_REPOSITORY: ${{ github.repository }}
      run: |
        export TAG=${{ github.sha }}
        ./scripts/deploy.sh development $TAG
        
  deploy-prod:
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    environment: production
    steps:
    - uses: actions/checkout@v3
    
    - name: Setup SSH
      uses: webfactory/ssh-agent@v0.8.0
      with:
        ssh-private-key: ${{ secrets.PROD_SSH_KEY }}
    
    - name: Deploy to Production
      env:
        PROD_HOST: ${{ secrets.PROD_HOST }}
        PROD_USER: ${{ secrets.PROD_USER }}
        PROD_DIR: ${{ secrets.PROD_DIR }}
        GITHUB_REPOSITORY: ${{ github.repository }}
      run: |
        export TAG=${{ github.sha }}
        ./scripts/deploy.sh production $TAG
    
    - name: Run Production Health Checks
      env:
        PROD_URL: ${{ secrets.PROD_URL }}
      run: |
        ./scripts/health_check.sh $PROD_URL

  backend:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:14-alpine
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: bdc_test
        ports: [ '5432:5432' ]
        options: >-
          --health-cmd "pg_isready -U postgres" --health-interval 10s --health-timeout 5s --health-retries 5
      redis:
        image: redis:alpine
        ports: [ '6379:6379' ]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.10'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r server/requirements.txt
          pip install pytest flake8 coverage
      - name: Lint backend
        run: |
          flake8 server || true  # don't fail build yet, informational
      - name: Run backend tests
        run: |
          cd server
          python run_tests.py

  frontend:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
      - name: Install dependencies
        run: |
          cd client
          npm ci
      - name: Lint frontend
        run: |
          cd client
          npm run lint --if-present || true
      - name: Run frontend tests
        run: |
          cd client
          npm run test:coverage -- --run || npm test || true