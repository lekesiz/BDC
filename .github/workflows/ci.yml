name: BDC CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ubuntu-latest
    services:
      redis:
        image: redis
        ports:
          - 6379:6379
        options: --health-cmd "redis-cli ping" --health-interval 10s --health-timeout 5s --health-retries 5
      
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
        
    - name: Install dependencies
      working-directory: ./server
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-test.txt
        
    - name: Run tests
      working-directory: ./server
      run: |
        bash run_tests.sh
      env:
        FLASK_ENV: testing
        
    - name: Upload test coverage
      uses: actions/upload-artifact@v3
      with:
        name: coverage-report
        path: server/coverage_html/
        
  lint:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
        
    - name: Install linting tools
      run: |
        python -m pip install --upgrade pip
        pip install flake8 black isort
        
    - name: Lint Python code
      working-directory: ./server
      run: |
        flake8 app tests
        black --check app tests
        isort --check-only app tests
        
    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
        
    - name: Install frontend dependencies
      working-directory: ./client
      run: npm ci
      
    - name: Lint JavaScript code
      working-directory: ./client
      run: |
        npm run lint
        
  build:
    runs-on: ubuntu-latest
    needs: [test, lint]
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
      
    - name: Login to Container Registry
      uses: docker/login-action@v2
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Build and push Server Docker image
      uses: docker/build-push-action@v4
      with:
        context: ./server
        file: ./docker/Dockerfile.server
        push: true
        tags: |
          ghcr.io/${{ github.repository }}/bdc-server:${{ github.sha }}
          ghcr.io/${{ github.repository }}/bdc-server:latest
          
    - name: Build and push Client Docker image
      uses: docker/build-push-action@v4
      with:
        context: ./client
        file: ./docker/Dockerfile.client
        push: true
        tags: |
          ghcr.io/${{ github.repository }}/bdc-client:${{ github.sha }}
          ghcr.io/${{ github.repository }}/bdc-client:latest
          
  deploy-dev:
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'push' && github.ref == 'refs/heads/develop'
    environment: development
    steps:
    - uses: actions/checkout@v3
    
    - name: Deploy to Development
      run: |
        echo "Deploying to development environment..."
        # Add deployment steps here
        # For example, use SSH to connect to server and pull/update containers
        
  deploy-prod:
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    environment: production
    steps:
    - uses: actions/checkout@v3
    
    - name: Deploy to Production
      run: |
        echo "Deploying to production environment..."
        # Add deployment steps here
        # For example, use SSH to connect to server and pull/update containers