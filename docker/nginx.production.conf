# Production Nginx configuration with security hardening

user nginx;
worker_processes auto;
worker_rlimit_nofile 8192;
error_log /var/log/nginx/error.log warn;
pid /var/run/nginx.pid;

# Security: Load additional modules
load_module modules/ngx_http_geoip_module.so;

events {
    worker_connections 4096;
    use epoll;
    multi_accept on;
    accept_mutex off;
}

http {
    # Security: Hide Nginx version
    server_tokens off;
    
    # Security: Prevent clickjacking
    add_header X-Frame-Options "DENY" always;
    
    # Security: XSS Protection
    add_header X-XSS-Protection "1; mode=block" always;
    
    # Security: Content type sniffing
    add_header X-Content-Type-Options "nosniff" always;
    
    # Security: Referrer Policy
    add_header Referrer-Policy "strict-origin-when-cross-origin" always;
    
    # Security: Content Security Policy
    add_header Content-Security-Policy "default-src 'self'; script-src 'self' 'unsafe-inline' 'unsafe-eval' https://cdn.jsdelivr.net; style-src 'self' 'unsafe-inline' https://fonts.googleapis.com; font-src 'self' https://fonts.gstatic.com; img-src 'self' data: https:; connect-src 'self' wss: https:; object-src 'none'; base-uri 'self'; form-action 'self'; frame-ancestors 'none'; upgrade-insecure-requests;" always;
    
    # Security: HSTS (HTTPS Strict Transport Security)
    add_header Strict-Transport-Security "max-age=31536000; includeSubDomains; preload" always;
    
    # Security: Permissions Policy
    add_header Permissions-Policy "geolocation=(), microphone=(), camera=(), payment=(), usb=(), magnetometer=(), gyroscope=(), accelerometer=()" always;
    
    # Security: Remove potentially dangerous headers
    proxy_hide_header X-Powered-By;
    proxy_hide_header Server;
    
    # Basic settings
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    
    # Logging format with security information
    log_format security_log '$remote_addr - $remote_user [$time_local] '
                          '"$request" $status $body_bytes_sent '
                          '"$http_referer" "$http_user_agent" '
                          '"$http_x_forwarded_for" "$http_x_real_ip" '
                          '$request_time $upstream_response_time '
                          '"$ssl_protocol" "$ssl_cipher"';
    
    access_log /var/log/nginx/access.log security_log;
    
    # Performance optimizations
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    keepalive_requests 1000;
    
    # Security: Buffer size limitations to prevent buffer overflow attacks
    client_body_buffer_size 128k;
    client_max_body_size 50m;
    client_header_buffer_size 1k;
    large_client_header_buffers 4 4k;
    client_body_timeout 12;
    client_header_timeout 12;
    send_timeout 10;
    
    # Security: Rate limiting
    limit_req_zone $binary_remote_addr zone=login:10m rate=5r/m;
    limit_req_zone $binary_remote_addr zone=api:10m rate=60r/m;
    limit_req_zone $binary_remote_addr zone=general:10m rate=100r/m;
    limit_conn_zone $binary_remote_addr zone=conn_limit_per_ip:10m;
    
    # Compression
    gzip on;
    gzip_vary on;
    gzip_min_length 1024;
    gzip_comp_level 6;
    gzip_types
        text/plain
        text/css
        text/xml
        text/javascript
        application/json
        application/javascript
        application/xml+rss
        application/atom+xml
        image/svg+xml;
    
    # SSL/TLS Configuration
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers 'ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA256';
    ssl_prefer_server_ciphers off;
    ssl_session_cache shared:SSL:10m;
    ssl_session_timeout 10m;
    ssl_session_tickets off;
    
    # Security: OCSP Stapling
    ssl_stapling on;
    ssl_stapling_verify on;
    resolver 8.8.8.8 8.8.4.4 valid=300s;
    resolver_timeout 5s;
    
    # Security: Block common attack patterns
    map $http_user_agent $block_user_agent {
        ~*bot 1;
        ~*crawler 1;
        ~*spider 1;
        ~*scan 1;
        default 0;
    }
    
    # Security: Block suspicious requests
    map $request_uri $block_suspicious {
        ~*\.(asp|aspx|php|jsp)$ 1;
        ~*/wp- 1;
        ~*/admin 1;
        ~*/phpmyadmin 1;
        default 0;
    }
    
    # Upstream for backend application
    upstream backend {
        server 127.0.0.1:5000;
        keepalive 32;
    }
    
    # HTTP to HTTPS redirect
    server {
        listen 80;
        server_name _;
        
        # Security: Block suspicious requests
        if ($block_suspicious) {
            return 444;
        }
        
        # Security: Block malicious user agents
        if ($block_user_agent) {
            return 444;
        }
        
        # Redirect all HTTP traffic to HTTPS
        return 301 https://$host$request_uri;
    }
    
    # Main HTTPS server
    server {
        listen 443 ssl http2;
        server_name localhost;  # Change this to your domain
        
        # SSL Certificate paths (mount these as secrets in production)
        ssl_certificate /etc/ssl/certs/nginx.crt;
        ssl_certificate_key /etc/ssl/private/nginx.key;
        
        # Security: Block suspicious requests
        if ($block_suspicious) {
            return 444;
        }
        
        # Security: Block malicious user agents
        if ($block_user_agent) {
            return 444;
        }
        
        # Security: Limit connections per IP
        limit_conn conn_limit_per_ip 20;
        
        # Root directory for static files
        root /app/static;
        index index.html;
        
        # Security headers for all responses
        location / {
            # Apply general rate limiting
            limit_req zone=general burst=20 nodelay;
            
            try_files $uri $uri/ @backend;
            
            # Security: Additional headers for static content
            add_header Cache-Control "public, no-transform" always;
            add_header X-Content-Type-Options "nosniff" always;
        }
        
        # API endpoints
        location /api/ {
            # Apply API rate limiting
            limit_req zone=api burst=10 nodelay;
            
            # Security: Additional validation for API requests
            if ($request_method !~ ^(GET|POST|PUT|DELETE|PATCH|OPTIONS)$) {
                return 405;
            }
            
            proxy_pass http://backend;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-Forwarded-Host $server_name;
            
            # Security: Timeout settings
            proxy_connect_timeout 5s;
            proxy_send_timeout 10s;
            proxy_read_timeout 30s;
            
            # Security: Buffer settings
            proxy_buffering on;
            proxy_buffer_size 4k;
            proxy_buffers 8 4k;
            proxy_busy_buffers_size 8k;
            
            # Security: Hide backend server info
            proxy_hide_header X-Powered-By;
            proxy_hide_header Server;
        }
        
        # Authentication endpoints with stricter rate limiting
        location ~ ^/api/(auth|login|register|reset-password) {
            limit_req zone=login burst=5 nodelay;
            
            proxy_pass http://backend;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # Security: Log authentication attempts
            access_log /var/log/nginx/auth.log security_log;
        }
        
        # WebSocket support
        location /socket.io/ {
            proxy_pass http://backend;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # Security: WebSocket timeout
            proxy_read_timeout 86400;
        }
        
        # Static assets with caching
        location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg|woff2?|ttf|eot)$ {
            expires 1y;
            add_header Cache-Control "public, immutable";
            add_header X-Content-Type-Options "nosniff" always;
            
            # Security: Prevent access to source maps in production
            location ~* \.map$ {
                return 404;
            }
        }
        
        # Security: Block access to sensitive files
        location ~* \.(env|log|sql|conf|ini|bak|old|tmp|~)$ {
            deny all;
            return 404;
        }
        
        # Security: Block access to hidden files
        location ~ /\. {
            deny all;
            return 404;
        }
        
        # Security: Block access to backup files
        location ~ ~$ {
            deny all;
            return 404;
        }
        
        # Health check endpoint
        location /health {
            access_log off;
            add_header Content-Type text/plain;
            return 200 "OK\n";
        }
        
        # Fallback to backend for SPA routing
        location @backend {
            proxy_pass http://backend;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
        
        # Error pages
        error_page 404 /404.html;
        error_page 500 502 503 504 /50x.html;
        
        location = /50x.html {
            root /app/static;
        }
    }
    
    # Security: Block access to server-status (if enabled)
    server {
        listen 127.0.0.1:8080;
        server_name localhost;
        
        location /nginx_status {
            stub_status on;
            access_log off;
            allow 127.0.0.1;
            deny all;
        }
    }
}