version: '3.8'

services:
  server:
    image: ghcr.io/${GITHUB_REPOSITORY}/bdc-server:${TAG:-latest}
    container_name: bdc-server-prod
    environment:
      - FLASK_ENV=production
      - DATABASE_URL=postgresql://postgres:${DB_PASSWORD}@postgres:5432/bdc_production
      - REDIS_URL=redis://redis:6379/0
      - SECRET_KEY=${SECRET_KEY}
      - JWT_SECRET_KEY=${JWT_SECRET_KEY}
      - CORS_ORIGINS=https://app.bdc.com
      - MAIL_SERVER=${MAIL_SERVER}
      - MAIL_PORT=${MAIL_PORT}
      - MAIL_USERNAME=${MAIL_USERNAME}
      - MAIL_PASSWORD=${MAIL_PASSWORD}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - GOOGLE_CLIENT_ID=${GOOGLE_CLIENT_ID}
      - GOOGLE_CLIENT_SECRET=${GOOGLE_CLIENT_SECRET}
      - SENTRY_DSN=${SENTRY_DSN}
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - S3_BUCKET_NAME=${S3_BUCKET_NAME}
    depends_on:
      - postgres
      - redis
    volumes:
      - ./uploads:/app/uploads
      - ./logs:/app/logs
    restart: always
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      replicas: 3
      update_config:
        parallelism: 1
        delay: 10s
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
    networks:
      - bdc-network

  frontend:
    image: ghcr.io/${GITHUB_REPOSITORY}/bdc-client:${TAG:-latest}
    container_name: bdc-frontend-prod
    environment:
      - VITE_API_URL=https://api.bdc.com
      - VITE_ENVIRONMENT=production
    restart: always
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      replicas: 2
      update_config:
        parallelism: 1
        delay: 10s
    networks:
      - bdc-network

  postgres:
    image: postgres:14-alpine
    container_name: bdc-postgres-prod
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_DB=bdc_production
      - POSTGRES_INITDB_ARGS=--data-checksums
    volumes:
      - postgres_data_prod:/var/lib/postgresql/data
      - ./backup:/backup
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    deploy:
      placement:
        constraints:
          - node.labels.database == true
    networks:
      - bdc-network

  redis:
    image: redis:7-alpine
    container_name: bdc-redis-prod
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis_data_prod:/data
    restart: always
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD}", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - bdc-network

  nginx:
    image: nginx:alpine
    container_name: bdc-nginx-prod
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/prod.conf:/etc/nginx/nginx.conf:ro
      - ./ssl/prod:/etc/nginx/ssl:ro
      - ./static:/usr/share/nginx/static:ro
    depends_on:
      - server
      - frontend
    restart: always
    networks:
      - bdc-network
    deploy:
      placement:
        constraints:
          - node.role == manager

  prometheus:
    image: prom/prometheus:latest
    container_name: bdc-prometheus-prod
    volumes:
      - ./prometheus/prod.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data_prod:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--storage.tsdb.retention.time=30d'
    restart: always
    networks:
      - monitoring

  grafana:
    image: grafana/grafana:latest
    container_name: bdc-grafana-prod
    volumes:
      - grafana_data_prod:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning:ro
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_USER}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-simple-json-datasource
    depends_on:
      - prometheus
    restart: always
    networks:
      - monitoring

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.5.3
    container_name: bdc-elasticsearch-prod
    environment:
      - discovery.type=single-node
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      - xpack.security.enabled=false
    volumes:
      - elasticsearch_data_prod:/usr/share/elasticsearch/data
    restart: always
    networks:
      - monitoring

  logstash:
    image: docker.elastic.co/logstash/logstash:8.5.3
    container_name: bdc-logstash-prod
    volumes:
      - ./logstash/pipeline:/usr/share/logstash/pipeline:ro
    depends_on:
      - elasticsearch
    restart: always
    networks:
      - monitoring

  kibana:
    image: docker.elastic.co/kibana/kibana:8.5.3
    container_name: bdc-kibana-prod
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    depends_on:
      - elasticsearch
    restart: always
    networks:
      - monitoring

volumes:
  postgres_data_prod:
  redis_data_prod:
  prometheus_data_prod:
  grafana_data_prod:
  elasticsearch_data_prod:

networks:
  bdc-network:
    driver: overlay
    attachable: true
  monitoring:
    driver: overlay
    attachable: true