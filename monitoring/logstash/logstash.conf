# Logstash configuration for BDC application log processing

input {
  # Backend application logs
  beats {
    port => 5044
  }
  
  # File inputs for Docker logs
  file {
    path => "/logs/backend/*.log"
    start_position => "beginning"
    tags => ["backend", "application"]
    type => "backend"
  }
  
  file {
    path => "/logs/nginx/*.log"
    start_position => "beginning"
    tags => ["nginx", "frontend"]
    type => "nginx"
  }
}

filter {
  # Process backend application logs
  if "backend" in [tags] {
    # Parse JSON logs from Flask application
    if [message] =~ /^\{.*\}$/ {
      json {
        source => "message"
      }
    } else {
      # Parse structured logs
      grok {
        match => { 
          "message" => "%{TIMESTAMP_ISO8601:timestamp} %{LOGLEVEL:level} %{DATA:logger} %{GREEDYDATA:message}" 
        }
      }
    }
    
    # Add application metadata
    mutate {
      add_field => { "service" => "bdc-backend" }
      add_field => { "environment" => "production" }
    }
    
    # Parse error logs for better alerting
    if [level] == "ERROR" or [level] == "CRITICAL" {
      mutate {
        add_tag => ["error"]
      }
    }
  }
  
  # Process Nginx access logs
  if "nginx" in [tags] {
    grok {
      match => { 
        "message" => "%{COMBINEDAPACHELOG}" 
      }
    }
    
    # Convert response time to number
    if [response] {
      mutate {
        convert => { "response" => "integer" }
      }
    }
    
    # Add frontend metadata
    mutate {
      add_field => { "service" => "bdc-frontend" }
      add_field => { "environment" => "production" }
    }
    
    # Tag slow requests
    if [response] and [response] > 2000 {
      mutate {
        add_tag => ["slow_request"]
      }
    }
    
    # Tag error responses
    if [response] and [response] >= 400 {
      mutate {
        add_tag => ["error_response"]
      }
    }
  }
  
  # Parse timestamp
  date {
    match => [ "timestamp", "ISO8601" ]
  }
  
  # Remove unnecessary fields
  mutate {
    remove_field => [ "host", "path", "tags" ]
  }
  
  # GeoIP lookup for client IPs
  geoip {
    source => "clientip"
    target => "geoip"
  }
}

output {
  # Output to Elasticsearch
  elasticsearch {
    hosts => ["elasticsearch:9200"]
    index => "bdc-logs-%{+YYYY.MM.dd}"
    template_name => "bdc-logs"
    template => "/usr/share/logstash/templates/bdc-logs.json"
    template_overwrite => true
  }
  
  # Debug output (remove in production)
  # stdout { 
  #   codec => rubydebug 
  # }
  
  # Send critical errors to separate index for alerting
  if "error" in [tags] {
    elasticsearch {
      hosts => ["elasticsearch:9200"]
      index => "bdc-errors-%{+YYYY.MM.dd}"
    }
  }
}