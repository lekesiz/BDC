apiVersion: v1
kind: ConfigMap
metadata:
  name: bdc-backend-config
  namespace: bdc-production
  labels:
    app: bdc-backend
    environment: production
data:
  FLASK_ENV: "production"
  POSTGRES_DB: "bdc_production"
  POSTGRES_USER: "bdc_user"
  POSTGRES_PORT: "5432"
  REDIS_PORT: "6379"
  MAIL_PORT: "587"
  MAIL_USE_TLS: "true"
  AWS_DEFAULT_REGION: "us-east-1"
  
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: bdc-frontend-config
  namespace: bdc-production
  labels:
    app: bdc-frontend
    environment: production
data:
  VITE_ENVIRONMENT: "production"
  NGINX_PORT: "80"
  
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: nginx-config
  namespace: bdc-production
  labels:
    app: nginx
    environment: production
data:
  nginx.conf: |
    user nginx;
    worker_processes auto;
    error_log /var/log/nginx/error.log warn;
    pid /var/run/nginx.pid;
    
    events {
        worker_connections 1024;
        use epoll;
        multi_accept on;
    }
    
    http {
        include /etc/nginx/mime.types;
        default_type application/octet-stream;
        
        log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                        '$status $body_bytes_sent "$http_referer" '
                        '"$http_user_agent" "$http_x_forwarded_for"';
        
        access_log /var/log/nginx/access.log main;
        
        sendfile on;
        tcp_nopush on;
        tcp_nodelay on;
        keepalive_timeout 65;
        types_hash_max_size 2048;
        
        gzip on;
        gzip_vary on;
        gzip_min_length 1024;
        gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript;
        
        upstream backend {
            least_conn;
            server bdc-backend-service:5000 max_fails=3 fail_timeout=30s;
        }
        
        server {
            listen 80;
            server_name _;
            
            location / {
                root /usr/share/nginx/html;
                index index.html;
                try_files $uri $uri/ /index.html;
            }
            
            location /api/ {
                proxy_pass http://backend/;
                proxy_set_header Host $host;
                proxy_set_header X-Real-IP $remote_addr;
                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                proxy_set_header X-Forwarded-Proto $scheme;
                proxy_connect_timeout 30s;
                proxy_send_timeout 30s;
                proxy_read_timeout 30s;
            }
            
            location /socket.io/ {
                proxy_pass http://backend/socket.io/;
                proxy_http_version 1.1;
                proxy_set_header Upgrade $http_upgrade;
                proxy_set_header Connection "upgrade";
                proxy_set_header Host $host;
                proxy_set_header X-Real-IP $remote_addr;
                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                proxy_set_header X-Forwarded-Proto $scheme;
            }
            
            location /health {
                access_log off;
                return 200 "healthy\n";
                add_header Content-Type text/plain;
            }
        }
    }