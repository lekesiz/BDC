import React, { useState, useEffect, useCallback, useMemo } from 'react';\nimport { toast } from 'react-hot-toast';\nimport {\n  Activity,\n  AlertTriangle,\n  CheckCircle,\n  XCircle,\n  Server,\n  Database,\n  Cpu,\n  MemoryStick,\n  HardDrive,\n  Network,\n  Shield,\n  Clock,\n  Zap,\n  TrendingUp,\n  TrendingDown,\n  BarChart3,\n  RefreshCw,\n  Settings,\n  Bell,\n  Eye,\n  AlertCircle,\n  Info,\n  Wifi,\n  Container,\n  Users,\n  FileText\n} from 'lucide-react';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Badge } from '@/components/ui/badge';\nimport { Progress } from '@/components/ui/progress';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\nimport { Alert, AlertDescription } from '@/components/ui/alert';\nimport { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from '@/components/ui/tooltip';\nimport { Switch } from '@/components/ui/switch';\nimport { Separator } from '@/components/ui/separator';\nimport { useTranslation } from 'react-i18next';\n\n// Real-time chart component\nconst RealTimeChart = ({ data, title, color = '#3b82f6', height = 100 }) => {\n  const chartData = data.slice(-20); // Last 20 data points\n  \n  const maxValue = Math.max(...chartData.map(d => d.value), 1);\n  const minValue = Math.min(...chartData.map(d => d.value), 0);\n  const range = maxValue - minValue;\n  \n  const points = chartData.map((point, index) => {\n    const x = (index / (chartData.length - 1)) * 100;\n    const y = range > 0 ? ((maxValue - point.value) / range) * height : height / 2;\n    return `${x},${y}`;\n  }).join(' ');\n  \n  return (\n    <div className=\"relative\">\n      <h4 className=\"text-sm font-medium mb-2\">{title}</h4>\n      <svg width=\"100%\" height={height} className=\"border rounded\">\n        <polyline\n          fill=\"none\"\n          stroke={color}\n          strokeWidth=\"2\"\n          points={points}\n        />\n        {/* Grid lines */}\n        {[25, 50, 75].map(y => (\n          <line\n            key={y}\n            x1=\"0\"\n            y1={y}\n            x2=\"100%\"\n            y2={y}\n            stroke=\"#e5e7eb\"\n            strokeWidth=\"1\"\n            strokeDasharray=\"2,2\"\n          />\n        ))}\n      </svg>\n      <div className=\"flex justify-between text-xs text-gray-500 mt-1\">\n        <span>{chartData[0]?.timestamp ? new Date(chartData[0].timestamp).toLocaleTimeString() : ''}</span>\n        <span>{chartData[chartData.length - 1]?.timestamp ? new Date(chartData[chartData.length - 1].timestamp).toLocaleTimeString() : ''}</span>\n      </div>\n    </div>\n  );\n};\n\n// Metric display component\nconst MetricDisplay = ({ icon: Icon, title, value, unit, status, threshold, trend }) => {\n  const getStatusColor = () => {\n    switch (status) {\n      case 'healthy': return 'text-green-500';\n      case 'warning': return 'text-yellow-500';\n      case 'critical': return 'text-red-500';\n      default: return 'text-gray-500';\n    }\n  };\n  \n  const getTrendIcon = () => {\n    if (trend > 0) return <TrendingUp className=\"h-4 w-4 text-red-500\" />;\n    if (trend < 0) return <TrendingDown className=\"h-4 w-4 text-green-500\" />;\n    return null;\n  };\n  \n  return (\n    <div className=\"flex items-center justify-between\">\n      <div className=\"flex items-center space-x-3\">\n        <Icon className={`h-5 w-5 ${getStatusColor()}`} />\n        <div>\n          <div className=\"font-medium\">{title}</div>\n          <div className=\"text-sm text-gray-500\">\n            {value}{unit}\n            {threshold && ` / ${threshold}${unit}`}\n          </div>\n        </div>\n      </div>\n      <div className=\"flex items-center space-x-2\">\n        {getTrendIcon()}\n        <Badge\n          variant={status === 'healthy' ? 'default' : status === 'warning' ? 'secondary' : 'destructive'}\n        >\n          {status}\n        </Badge>\n      </div>\n    </div>\n  );\n};\n\n// Alert list component\nconst AlertsList = ({ alerts, onAcknowledge, onResolve }) => {\n  const getSeverityColor = (severity) => {\n    const colors = {\n      low: 'bg-blue-100 text-blue-800 border-blue-200',\n      medium: 'bg-yellow-100 text-yellow-800 border-yellow-200',\n      high: 'bg-orange-100 text-orange-800 border-orange-200',\n      critical: 'bg-red-100 text-red-800 border-red-200'\n    };\n    return colors[severity] || colors.medium;\n  };\n  \n  if (!alerts.length) {\n    return (\n      <div className=\"text-center py-8 text-gray-500\">\n        <CheckCircle className=\"h-12 w-12 mx-auto mb-4 text-green-500\" />\n        <p>No active alerts</p>\n      </div>\n    );\n  }\n  \n  return (\n    <div className=\"space-y-3\">\n      {alerts.map((alert) => (\n        <div key={alert.id} className=\"border rounded-lg p-4 bg-white\">\n          <div className=\"flex items-start justify-between mb-2\">\n            <div className=\"flex-1\">\n              <div className=\"flex items-center space-x-2 mb-1\">\n                <h4 className=\"font-semibold\">{alert.name}</h4>\n                <Badge className={getSeverityColor(alert.severity)}>\n                  {alert.severity}\n                </Badge>\n                {alert.escalation_level > 0 && (\n                  <Badge variant=\"destructive\">Escalated L{alert.escalation_level}</Badge>\n                )}\n              </div>\n              <p className=\"text-sm text-gray-600 mb-2\">{alert.description}</p>\n              <div className=\"flex items-center space-x-4 text-xs text-gray-500\">\n                <span>Source: {alert.source}</span>\n                <span>Since: {new Date(alert.timestamp * 1000).toLocaleString()}</span>\n                {alert.notification_count > 1 && (\n                  <span>Notifications: {alert.notification_count}</span>\n                )}\n              </div>\n            </div>\n            <div className=\"flex space-x-2\">\n              {alert.status === 'open' && (\n                <>\n                  <Button\n                    size=\"sm\"\n                    variant=\"outline\"\n                    onClick={() => onAcknowledge(alert.id)}\n                  >\n                    Acknowledge\n                  </Button>\n                  <Button\n                    size=\"sm\"\n                    variant=\"default\"\n                    onClick={() => onResolve(alert.id)}\n                  >\n                    Resolve\n                  </Button>\n                </>\n              )}\n              {alert.status === 'acknowledged' && (\n                <Button\n                  size=\"sm\"\n                  variant=\"default\"\n                  onClick={() => onResolve(alert.id)}\n                >\n                  Resolve\n                </Button>\n              )}\n            </div>\n          </div>\n          {alert.labels && Object.keys(alert.labels).length > 0 && (\n            <div className=\"mt-2\">\n              <div className=\"text-xs font-medium text-gray-500 mb-1\">Labels:</div>\n              <div className=\"flex flex-wrap gap-1\">\n                {Object.entries(alert.labels).map(([key, value]) => (\n                  <Badge key={key} variant=\"secondary\" className=\"text-xs\">\n                    {key}={value}\n                  </Badge>\n                ))}\n              </div>\n            </div>\n          )}\n        </div>\n      ))}\n    </div>\n  );\n};\n\nconst RealTimeMonitoringDashboard = () => {\n  const { t } = useTranslation();\n  const [systemMetrics, setSystemMetrics] = useState({});\n  const [applicationMetrics, setApplicationMetrics] = useState({});\n  const [infrastructureMetrics, setInfrastructureMetrics] = useState({});\n  const [alerts, setAlerts] = useState([]);\n  const [historicalData, setHistoricalData] = useState({\n    cpu: [],\n    memory: [],\n    disk: [],\n    network: [],\n    responseTime: [],\n    errorRate: []\n  });\n  const [isLoading, setIsLoading] = useState(true);\n  const [lastUpdated, setLastUpdated] = useState(null);\n  const [autoRefresh, setAutoRefresh] = useState(true);\n  const [refreshInterval, setRefreshInterval] = useState(30000); // 30 seconds\n  const [selectedTimeRange, setSelectedTimeRange] = useState('1h');\n  \n  // Fetch monitoring data\n  const fetchMonitoringData = useCallback(async () => {\n    try {\n      const [healthResponse, apmResponse, infraResponse, alertsResponse] = await Promise.all([\n        fetch('/api/health/detailed'),\n        fetch('/api/monitoring/apm/summary'),\n        fetch('/api/monitoring/infrastructure/summary'),\n        fetch('/api/monitoring/alerts/active')\n      ]);\n      \n      if (healthResponse.ok) {\n        const healthData = await healthResponse.json();\n        setSystemMetrics(healthData);\n      }\n      \n      if (apmResponse.ok) {\n        const apmData = await apmResponse.json();\n        setApplicationMetrics(apmData);\n      }\n      \n      if (infraResponse.ok) {\n        const infraData = await infraResponse.json();\n        setInfrastructureMetrics(infraData);\n      }\n      \n      if (alertsResponse.ok) {\n        const alertsData = await alertsResponse.json();\n        setAlerts(alertsData.alerts || []);\n      }\n      \n      // Update historical data\n      const timestamp = Date.now();\n      setHistoricalData(prev => ({\n        cpu: [...prev.cpu.slice(-19), { timestamp, value: systemMetrics.checks?.memory?.usage_percent || 0 }],\n        memory: [...prev.memory.slice(-19), { timestamp, value: systemMetrics.checks?.memory?.usage_percent || 0 }],\n        disk: [...prev.disk.slice(-19), { timestamp, value: systemMetrics.checks?.disk_space?.free_percent || 0 }],\n        network: [...prev.network.slice(-19), { timestamp, value: Math.random() * 100 }], // Placeholder\n        responseTime: [...prev.responseTime.slice(-19), { timestamp, value: applicationMetrics.requests?.average_response_time || 0 }],\n        errorRate: [...prev.errorRate.slice(-19), { timestamp, value: (applicationMetrics.requests?.error_rate || 0) * 100 }]\n      }));\n      \n      setLastUpdated(new Date());\n    } catch (error) {\n      console.error('Error fetching monitoring data:', error);\n      toast.error('Failed to fetch monitoring data');\n    } finally {\n      setIsLoading(false);\n    }\n  }, [systemMetrics.checks, applicationMetrics.requests]);\n  \n  // Auto-refresh effect\n  useEffect(() => {\n    fetchMonitoringData();\n    \n    if (autoRefresh) {\n      const interval = setInterval(fetchMonitoringData, refreshInterval);\n      return () => clearInterval(interval);\n    }\n  }, [fetchMonitoringData, autoRefresh, refreshInterval]);\n  \n  // Alert actions\n  const acknowledgeAlert = async (alertId) => {\n    try {\n      const response = await fetch(`/api/monitoring/alerts/${alertId}/acknowledge`, {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ acknowledged_by: 'admin' }) // In real app, use current user\n      });\n      \n      if (response.ok) {\n        toast.success('Alert acknowledged');\n        fetchMonitoringData();\n      }\n    } catch (error) {\n      toast.error('Failed to acknowledge alert');\n    }\n  };\n  \n  const resolveAlert = async (alertId) => {\n    try {\n      const response = await fetch(`/api/monitoring/alerts/${alertId}/resolve`, {\n        method: 'POST'\n      });\n      \n      if (response.ok) {\n        toast.success('Alert resolved');\n        fetchMonitoringData();\n      }\n    } catch (error) {\n      toast.error('Failed to resolve alert');\n    }\n  };\n  \n  // Calculate overall system health\n  const systemHealth = useMemo(() => {\n    const checks = systemMetrics.checks || {};\n    const healthyChecks = Object.values(checks).filter(check => check.status === 'healthy').length;\n    const totalChecks = Object.values(checks).length;\n    \n    if (totalChecks === 0) return 'unknown';\n    if (healthyChecks === totalChecks) return 'healthy';\n    if (healthyChecks / totalChecks > 0.7) return 'warning';\n    return 'critical';\n  }, [systemMetrics.checks]);\n  \n  // Get critical alerts count\n  const criticalAlertsCount = alerts.filter(alert => alert.severity === 'critical').length;\n  const highAlertsCount = alerts.filter(alert => alert.severity === 'high').length;\n  \n  if (isLoading) {\n    return (\n      <div className=\"flex items-center justify-center h-64\">\n        <RefreshCw className=\"h-8 w-8 animate-spin text-blue-500\" />\n        <span className=\"ml-2 text-lg\">Loading monitoring data...</span>\n      </div>\n    );\n  }\n  \n  return (\n    <div className=\"space-y-6\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-3xl font-bold\">Real-Time Monitoring Dashboard</h1>\n          <p className=\"text-gray-600 mt-1\">\n            Comprehensive system health and performance monitoring\n          </p>\n        </div>\n        <div className=\"flex items-center space-x-4\">\n          <div className=\"flex items-center space-x-2\">\n            <Switch\n              checked={autoRefresh}\n              onCheckedChange={setAutoRefresh}\n            />\n            <span className=\"text-sm\">Auto-refresh</span>\n          </div>\n          <div className=\"text-sm text-gray-500\">\n            Last updated: {lastUpdated?.toLocaleTimeString()}\n          </div>\n          <Button onClick={fetchMonitoringData} variant=\"outline\" size=\"sm\">\n            <RefreshCw className=\"h-4 w-4 mr-2\" />\n            Refresh\n          </Button>\n        </div>\n      </div>\n      \n      {/* Alert Banner */}\n      {(criticalAlertsCount > 0 || highAlertsCount > 0) && (\n        <Alert className={criticalAlertsCount > 0 ? \"border-red-200 bg-red-50\" : \"border-orange-200 bg-orange-50\"}>\n          <AlertTriangle className=\"h-4 w-4\" />\n          <AlertDescription>\n            {criticalAlertsCount > 0 && (\n              <span className=\"font-semibold text-red-800\">\n                {criticalAlertsCount} critical alert{criticalAlertsCount > 1 ? 's' : ''}\n              </span>\n            )}\n            {criticalAlertsCount > 0 && highAlertsCount > 0 && <span> and </span>}\n            {highAlertsCount > 0 && (\n              <span className=\"font-semibold text-orange-800\">\n                {highAlertsCount} high priority alert{highAlertsCount > 1 ? 's' : ''}\n              </span>\n            )}\n            {' '}require attention.\n          </AlertDescription>\n        </Alert>\n      )}\n      \n      {/* System Overview Cards */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">System Health</CardTitle>\n            <Activity className={`h-4 w-4 ${\n              systemHealth === 'healthy' ? 'text-green-500' :\n              systemHealth === 'warning' ? 'text-yellow-500' :\n              systemHealth === 'critical' ? 'text-red-500' : 'text-gray-500'\n            }`} />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold capitalize\">{systemHealth}</div>\n            <p className=\"text-xs text-muted-foreground\">\n              {Object.keys(systemMetrics.checks || {}).length} services monitored\n            </p>\n          </CardContent>\n        </Card>\n        \n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Active Alerts</CardTitle>\n            <Bell className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">{alerts.length}</div>\n            <p className=\"text-xs text-muted-foreground\">\n              {criticalAlertsCount} critical, {highAlertsCount} high priority\n            </p>\n          </CardContent>\n        </Card>\n        \n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Response Time</CardTitle>\n            <Clock className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">\n              {applicationMetrics.requests?.average_response_time?.toFixed(0) || 0}ms\n            </div>\n            <p className=\"text-xs text-muted-foreground\">\n              P95: {applicationMetrics.requests?.percentiles?.p95?.toFixed(0) || 0}ms\n            </p>\n          </CardContent>\n        </Card>\n        \n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Error Rate</CardTitle>\n            <AlertCircle className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">\n              {((applicationMetrics.requests?.error_rate || 0) * 100).toFixed(2)}%\n            </div>\n            <p className=\"text-xs text-muted-foreground\">\n              {applicationMetrics.requests?.failed || 0} failed requests\n            </p>\n          </CardContent>\n        </Card>\n      </div>\n      \n      <Tabs defaultValue=\"overview\" className=\"w-full\">\n        <TabsList>\n          <TabsTrigger value=\"overview\">Overview</TabsTrigger>\n          <TabsTrigger value=\"system\">System</TabsTrigger>\n          <TabsTrigger value=\"application\">Application</TabsTrigger>\n          <TabsTrigger value=\"infrastructure\">Infrastructure</TabsTrigger>\n          <TabsTrigger value=\"alerts\">Alerts</TabsTrigger>\n          <TabsTrigger value=\"realtime\">Real-Time Charts</TabsTrigger>\n        </TabsList>\n        \n        {/* Overview Tab */}\n        <TabsContent value=\"overview\" className=\"space-y-6\">\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n            {/* System Metrics */}\n            <Card>\n              <CardHeader>\n                <CardTitle>System Metrics</CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <MetricDisplay\n                  icon={Cpu}\n                  title=\"CPU Usage\"\n                  value={systemMetrics.checks?.cpu?.usage_percent || 0}\n                  unit=\"%\"\n                  status={systemMetrics.checks?.cpu?.status || 'unknown'}\n                  threshold={80}\n                />\n                <Separator />\n                <MetricDisplay\n                  icon={MemoryStick}\n                  title=\"Memory Usage\"\n                  value={systemMetrics.checks?.memory?.usage_percent || 0}\n                  unit=\"%\"\n                  status={systemMetrics.checks?.memory?.status || 'unknown'}\n                  threshold={85}\n                />\n                <Separator />\n                <MetricDisplay\n                  icon={HardDrive}\n                  title=\"Disk Usage\"\n                  value={systemMetrics.checks?.disk_space?.usage_percent || 0}\n                  unit=\"%\"\n                  status={systemMetrics.checks?.disk_space?.status || 'unknown'}\n                  threshold={90}\n                />\n              </CardContent>\n            </Card>\n            \n            {/* Application Metrics */}\n            <Card>\n              <CardHeader>\n                <CardTitle>Application Metrics</CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <MetricDisplay\n                  icon={Activity}\n                  title=\"Requests/Hour\"\n                  value={applicationMetrics.requests?.total || 0}\n                  unit=\"\"\n                  status=\"healthy\"\n                />\n                <Separator />\n                <MetricDisplay\n                  icon={Users}\n                  title=\"Active Sessions\"\n                  value={applicationMetrics.sessions?.active || 0}\n                  unit=\"\"\n                  status=\"healthy\"\n                />\n                <Separator />\n                <MetricDisplay\n                  icon={Database}\n                  title=\"DB Queries/Hour\"\n                  value={applicationMetrics.database?.total_queries || 0}\n                  unit=\"\"\n                  status={applicationMetrics.database?.slow_queries_count > 10 ? 'warning' : 'healthy'}\n                />\n              </CardContent>\n            </Card>\n          </div>\n          \n          {/* Service Status */}\n          <Card>\n            <CardHeader>\n              <CardTitle>Service Status</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\n                {Object.entries(systemMetrics.checks || {}).map(([service, status]) => (\n                  <div key={service} className=\"flex items-center space-x-2\">\n                    {status.status === 'healthy' ? (\n                      <CheckCircle className=\"h-4 w-4 text-green-500\" />\n                    ) : status.status === 'warning' ? (\n                      <AlertTriangle className=\"h-4 w-4 text-yellow-500\" />\n                    ) : (\n                      <XCircle className=\"h-4 w-4 text-red-500\" />\n                    )}\n                    <span className=\"text-sm capitalize\">{service.replace('_', ' ')}</span>\n                  </div>\n                ))}\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n        \n        {/* System Tab */}\n        <TabsContent value=\"system\" className=\"space-y-6\">\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n            {Object.entries(systemMetrics.checks || {}).map(([checkName, checkData]) => (\n              <Card key={checkName}>\n                <CardHeader>\n                  <CardTitle className=\"flex items-center space-x-2\">\n                    <span className=\"capitalize\">{checkName.replace('_', ' ')}</span>\n                    <Badge\n                      variant={checkData.status === 'healthy' ? 'default' : \n                              checkData.status === 'warning' ? 'secondary' : 'destructive'}\n                    >\n                      {checkData.status}\n                    </Badge>\n                  </CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <p className=\"text-sm text-gray-600 mb-2\">{checkData.message}</p>\n                  {checkData.response_time && (\n                    <p className=\"text-xs text-gray-500\">\n                      Response time: {checkData.response_time}ms\n                    </p>\n                  )}\n                  {checkData.usage_percent && (\n                    <div className=\"mt-2\">\n                      <Progress value={checkData.usage_percent} className=\"mt-1\" />\n                      <p className=\"text-xs text-gray-500 mt-1\">\n                        {checkData.usage_percent}% used\n                      </p>\n                    </div>\n                  )}\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        </TabsContent>\n        \n        {/* Application Tab */}\n        <TabsContent value=\"application\" className=\"space-y-6\">\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n            <Card>\n              <CardHeader>\n                <CardTitle>Request Metrics</CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-3\">\n                <div className=\"flex justify-between\">\n                  <span>Total Requests</span>\n                  <span className=\"font-semibold\">{applicationMetrics.requests?.total || 0}</span>\n                </div>\n                <div className=\"flex justify-between\">\n                  <span>Successful</span>\n                  <span className=\"font-semibold text-green-600\">{applicationMetrics.requests?.successful || 0}</span>\n                </div>\n                <div className=\"flex justify-between\">\n                  <span>Failed</span>\n                  <span className=\"font-semibold text-red-600\">{applicationMetrics.requests?.failed || 0}</span>\n                </div>\n                <div className=\"flex justify-between\">\n                  <span>Error Rate</span>\n                  <span className=\"font-semibold\">\n                    {((applicationMetrics.requests?.error_rate || 0) * 100).toFixed(2)}%\n                  </span>\n                </div>\n              </CardContent>\n            </Card>\n            \n            <Card>\n              <CardHeader>\n                <CardTitle>Performance</CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-3\">\n                <div className=\"flex justify-between\">\n                  <span>Avg Response Time</span>\n                  <span className=\"font-semibold\">\n                    {applicationMetrics.requests?.average_response_time?.toFixed(0) || 0}ms\n                  </span>\n                </div>\n                <div className=\"flex justify-between\">\n                  <span>P95 Response Time</span>\n                  <span className=\"font-semibold\">\n                    {applicationMetrics.requests?.percentiles?.p95?.toFixed(0) || 0}ms\n                  </span>\n                </div>\n                <div className=\"flex justify-between\">\n                  <span>P99 Response Time</span>\n                  <span className=\"font-semibold\">\n                    {applicationMetrics.requests?.percentiles?.p99?.toFixed(0) || 0}ms\n                  </span>\n                </div>\n              </CardContent>\n            </Card>\n            \n            <Card>\n              <CardHeader>\n                <CardTitle>Database Performance</CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-3\">\n                <div className=\"flex justify-between\">\n                  <span>Total Queries</span>\n                  <span className=\"font-semibold\">{applicationMetrics.database?.total_queries || 0}</span>\n                </div>\n                <div className=\"flex justify-between\">\n                  <span>Avg Query Time</span>\n                  <span className=\"font-semibold\">\n                    {applicationMetrics.database?.average_query_time?.toFixed(0) || 0}ms\n                  </span>\n                </div>\n                <div className=\"flex justify-between\">\n                  <span>Slow Queries</span>\n                  <span className=\"font-semibold text-yellow-600\">\n                    {applicationMetrics.database?.slow_queries_count || 0}\n                  </span>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        </TabsContent>\n        \n        {/* Infrastructure Tab */}\n        <TabsContent value=\"infrastructure\" className=\"space-y-6\">\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n            <Card>\n              <CardHeader>\n                <CardTitle>Network Status</CardTitle>\n              </CardHeader>\n              <CardContent>\n                {infrastructureMetrics.network?.targets ? (\n                  <div className=\"space-y-3\">\n                    {Object.entries(infrastructureMetrics.network.targets).map(([target, data]) => (\n                      <div key={target} className=\"flex items-center justify-between\">\n                        <div className=\"flex items-center space-x-2\">\n                          <Wifi className={`h-4 w-4 ${\n                            data.status === 'healthy' ? 'text-green-500' :\n                            data.status === 'degraded' ? 'text-yellow-500' : 'text-red-500'\n                          }`} />\n                          <span className=\"capitalize\">{target.replace('_', ' ')}</span>\n                        </div>\n                        <div className=\"text-right\">\n                          <div className=\"text-sm font-medium\">{data.average_latency_ms?.toFixed(0)}ms</div>\n                          <div className=\"text-xs text-gray-500\">{data.average_packet_loss?.toFixed(1)}% loss</div>\n                        </div>\n                      </div>\n                    ))}\n                  </div>\n                ) : (\n                  <p className=\"text-gray-500\">Network monitoring data not available</p>\n                )}\n              </CardContent>\n            </Card>\n            \n            <Card>\n              <CardHeader>\n                <CardTitle>Container Status</CardTitle>\n              </CardHeader>\n              <CardContent>\n                {infrastructureMetrics.containers ? (\n                  <div className=\"space-y-3\">\n                    <div className=\"flex justify-between\">\n                      <span>Total Containers</span>\n                      <span className=\"font-semibold\">{infrastructureMetrics.containers.total_containers || 0}</span>\n                    </div>\n                    <div className=\"flex justify-between\">\n                      <span>Running</span>\n                      <span className=\"font-semibold text-green-600\">\n                        {infrastructureMetrics.containers.running_containers || 0}\n                      </span>\n                    </div>\n                    <div className=\"flex justify-between\">\n                      <span>Stopped</span>\n                      <span className=\"font-semibold text-red-600\">\n                        {infrastructureMetrics.containers.stopped_containers || 0}\n                      </span>\n                    </div>\n                    <Badge\n                      variant={infrastructureMetrics.containers.status === 'healthy' ? 'default' : 'destructive'}\n                      className=\"w-full justify-center\"\n                    >\n                      {infrastructureMetrics.containers.status}\n                    </Badge>\n                  </div>\n                ) : (\n                  <p className=\"text-gray-500\">Container monitoring data not available</p>\n                )}\n              </CardContent>\n            </Card>\n          </div>\n          \n          {/* Storage Information */}\n          {infrastructureMetrics.storage && (\n            <Card>\n              <CardHeader>\n                <CardTitle>Storage Usage</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-4\">\n                  <div className=\"flex justify-between items-center\">\n                    <span>Overall Usage</span>\n                    <span className=\"font-semibold\">\n                      {infrastructureMetrics.storage.overall_usage_percent?.toFixed(1)}%\n                    </span>\n                  </div>\n                  <Progress value={infrastructureMetrics.storage.overall_usage_percent} />\n                  <div className=\"grid grid-cols-3 gap-4 text-center\">\n                    <div>\n                      <div className=\"text-sm text-gray-500\">Total</div>\n                      <div className=\"font-semibold\">\n                        {infrastructureMetrics.storage.total_space_gb?.toFixed(1)}GB\n                      </div>\n                    </div>\n                    <div>\n                      <div className=\"text-sm text-gray-500\">Used</div>\n                      <div className=\"font-semibold\">\n                        {infrastructureMetrics.storage.used_space_gb?.toFixed(1)}GB\n                      </div>\n                    </div>\n                    <div>\n                      <div className=\"text-sm text-gray-500\">Free</div>\n                      <div className=\"font-semibold\">\n                        {infrastructureMetrics.storage.free_space_gb?.toFixed(1)}GB\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          )}\n        </TabsContent>\n        \n        {/* Alerts Tab */}\n        <TabsContent value=\"alerts\">\n          <Card>\n            <CardHeader>\n              <CardTitle>Active Alerts</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <AlertsList\n                alerts={alerts}\n                onAcknowledge={acknowledgeAlert}\n                onResolve={resolveAlert}\n              />\n            </CardContent>\n          </Card>\n        </TabsContent>\n        \n        {/* Real-Time Charts Tab */}\n        <TabsContent value=\"realtime\" className=\"space-y-6\">\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n            <Card>\n              <CardContent className=\"pt-6\">\n                <RealTimeChart\n                  data={historicalData.cpu}\n                  title=\"CPU Usage (%)\"\n                  color=\"#ef4444\"\n                />\n              </CardContent>\n            </Card>\n            \n            <Card>\n              <CardContent className=\"pt-6\">\n                <RealTimeChart\n                  data={historicalData.memory}\n                  title=\"Memory Usage (%)\"\n                  color=\"#f59e0b\"\n                />\n              </CardContent>\n            </Card>\n            \n            <Card>\n              <CardContent className=\"pt-6\">\n                <RealTimeChart\n                  data={historicalData.responseTime}\n                  title=\"Response Time (ms)\"\n                  color=\"#3b82f6\"\n                />\n              </CardContent>\n            </Card>\n            \n            <Card>\n              <CardContent className=\"pt-6\">\n                <RealTimeChart\n                  data={historicalData.errorRate}\n                  title=\"Error Rate (%)\"\n                  color=\"#dc2626\"\n                />\n              </CardContent>\n            </Card>\n          </div>\n        </TabsContent>\n      </Tabs>\n    </div>\n  );\n};\n\nexport default RealTimeMonitoringDashboard;"