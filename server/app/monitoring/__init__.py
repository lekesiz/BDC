"""
Comprehensive Monitoring System Initialization
Integrates APM, Infrastructure Monitoring, and Alerting Services
"""

import os\nimport logging\nfrom typing import Optional\nfrom flask import Flask\nimport redis\n\nfrom app.services.apm_service import APMService, init_apm_service\nfrom app.services.infrastructure_monitoring import InfrastructureMonitor, init_infrastructure_monitoring\nfrom app.services.alerting_service import AlertingService, init_alerting_service, AlertSeverity\nfrom app.api.monitoring import init_monitoring_api\nfrom app.utils.logging import logger\n\nclass MonitoringSystem:\n    \"\"\"Centralized monitoring system manager\"\"\"\n    \n    def __init__(self, app: Optional[Flask] = None, redis_client: Optional[redis.Redis] = None):\n        self.app = app\n        self.redis_client = redis_client\n        \n        # Service instances\n        self.apm_service: Optional[APMService] = None\n        self.infrastructure_monitor: Optional[InfrastructureMonitor] = None\n        self.alerting_service: Optional[AlertingService] = None\n        \n        # Configuration\n        self.config = {\n            'apm_enabled': True,\n            'infrastructure_enabled': True,\n            'alerting_enabled': True,\n            'auto_start': True,\n            'redis_required': False\n        }\n        \n        if app:\n            self.init_app(app, redis_client)\n    \n    def init_app(self, app: Flask, redis_client: Optional[redis.Redis] = None):\n        \"\"\"Initialize monitoring system with Flask app\"\"\"\n        self.app = app\n        self.redis_client = redis_client or app.extensions.get('redis')\n        \n        # Load configuration from environment\n        self._load_config()\n        \n        # Initialize services\n        self._init_services()\n        \n        # Setup integrations\n        self._setup_integrations()\n        \n        # Register API endpoints\n        self._register_api()\n        \n        # Auto-start services if configured\n        if self.config.get('auto_start', True):\n            self.start_monitoring()\n        \n        # Store reference in app\n        app.monitoring_system = self\n        \n        logger.info(\"Monitoring system initialized successfully\")\n    \n    def _load_config(self):\n        \"\"\"Load monitoring configuration from environment variables\"\"\"\n        self.config.update({\n            'apm_enabled': os.getenv('MONITORING_APM_ENABLED', 'true').lower() == 'true',\n            'infrastructure_enabled': os.getenv('MONITORING_INFRASTRUCTURE_ENABLED', 'true').lower() == 'true',\n            'alerting_enabled': os.getenv('MONITORING_ALERTING_ENABLED', 'true').lower() == 'true',\n            'auto_start': os.getenv('MONITORING_AUTO_START', 'true').lower() == 'true',\n            'redis_required': os.getenv('MONITORING_REDIS_REQUIRED', 'false').lower() == 'true'\n        })\n        \n        # Redis configuration\n        if not self.redis_client and not self.config['redis_required']:\n            logger.warning(\"Redis not available - some monitoring features will be limited\")\n    \n    def _init_services(self):\n        \"\"\"Initialize monitoring services\"\"\"\n        try:\n            # Initialize APM Service\n            if self.config['apm_enabled']:\n                self.apm_service = init_apm_service(self.app, self.redis_client)\n                logger.info(\"APM service initialized\")\n            \n            # Initialize Infrastructure Monitor\n            if self.config['infrastructure_enabled']:\n                self.infrastructure_monitor = init_infrastructure_monitoring(self.redis_client)\n                logger.info(\"Infrastructure monitor initialized\")\n            \n            # Initialize Alerting Service\n            if self.config['alerting_enabled']:\n                self.alerting_service = init_alerting_service(self.redis_client)\n                self._setup_default_alerts()\n                logger.info(\"Alerting service initialized\")\n                \n        except Exception as e:\n            logger.error(f\"Error initializing monitoring services: {e}\")\n            raise\n    \n    def _setup_integrations(self):\n        \"\"\"Setup integrations between monitoring services\"\"\"\n        if not (self.apm_service and self.infrastructure_monitor and self.alerting_service):\n            return\n        \n        # Setup automatic alert creation from APM service\n        self._setup_apm_alerting_integration()\n        \n        # Setup automatic alert creation from infrastructure monitor\n        self._setup_infrastructure_alerting_integration()\n        \n        logger.info(\"Monitoring service integrations configured\")\n    \n    def _setup_apm_alerting_integration(self):\n        \"\"\"Integrate APM service with alerting\"\"\"\n        # This would be done by modifying the APM service to call alerting service\n        # For now, we'll set up periodic checks\n        pass\n    \n    def _setup_infrastructure_alerting_integration(self):\n        \"\"\"Integrate infrastructure monitoring with alerting\"\"\"\n        # This would be done by modifying the infrastructure monitor\n        # For now, we'll set up periodic checks\n        pass\n    \n    def _setup_default_alerts(self):\n        \"\"\"Setup default alert rules and thresholds\"\"\"\n        if not self.alerting_service:\n            return\n        \n        # Configure notification channels from environment\n        self._configure_notification_channels()\n        \n        # Setup alert rules for common scenarios\n        self._configure_alert_rules()\n    \n    def _configure_notification_channels(self):\n        \"\"\"Configure notification channels from environment variables\"\"\"\n        from app.services.alerting_service import NotificationChannel\n        \n        # Email configuration\n        admin_emails = os.getenv('ADMIN_EMAILS', '').split(',')\n        if admin_emails and admin_emails[0]:\n            email_config = {\n                'recipients': [email.strip() for email in admin_emails if email.strip()],\n                'smtp_server': os.getenv('MAIL_SERVER', 'localhost'),\n                'smtp_port': int(os.getenv('MAIL_PORT', '587')),\n                'username': os.getenv('MAIL_USERNAME', ''),\n                'password': os.getenv('MAIL_PASSWORD', ''),\n                'use_tls': os.getenv('MAIL_USE_TLS', 'true').lower() == 'true',\n                'from_email': os.getenv('MAIL_DEFAULT_SENDER', 'alerts@bdc.local')\n            }\n            \n            self.alerting_service.notification_channels['email_admin'].config.update(email_config)\n        \n        # Slack configuration\n        slack_webhook = os.getenv('SLACK_WEBHOOK_URL')\n        if slack_webhook:\n            self.alerting_service.notification_channels['slack_alerts'].config['webhook_url'] = slack_webhook\n            self.alerting_service.notification_channels['slack_alerts'].enabled = True\n        \n        # Webhook configuration\n        alert_webhook = os.getenv('ALERT_WEBHOOK_URL')\n        if alert_webhook:\n            self.alerting_service.notification_channels['webhook_general'].config['url'] = alert_webhook\n            self.alerting_service.notification_channels['webhook_general'].enabled = True\n    \n    def _configure_alert_rules(self):\n        \"\"\"Configure alert rules and thresholds\"\"\"\n        # Update thresholds from environment\n        if self.apm_service:\n            self.apm_service.thresholds.update({\n                'slow_request_ms': int(os.getenv('ALERT_SLOW_REQUEST_MS', '1000')),\n                'slow_query_ms': int(os.getenv('ALERT_SLOW_QUERY_MS', '500')),\n                'high_error_rate': float(os.getenv('ALERT_HIGH_ERROR_RATE', '0.05'))\n            })\n        \n        if self.infrastructure_monitor:\n            self.infrastructure_monitor.thresholds.update({\n                'cpu_warning': int(os.getenv('ALERT_CPU_WARNING', '70')),\n                'cpu_critical': int(os.getenv('ALERT_CPU_CRITICAL', '85')),\n                'memory_warning': int(os.getenv('ALERT_MEMORY_WARNING', '80')),\n                'memory_critical': int(os.getenv('ALERT_MEMORY_CRITICAL', '90')),\n                'disk_warning': int(os.getenv('ALERT_DISK_WARNING', '80')),\n                'disk_critical': int(os.getenv('ALERT_DISK_CRITICAL', '90'))\n            })\n    \n    def _register_api(self):\n        \"\"\"Register monitoring API endpoints\"\"\"\n        try:\n            init_monitoring_api(\n                self.app,\n                self.apm_service,\n                self.infrastructure_monitor,\n                self.alerting_service\n            )\n            logger.info(\"Monitoring API endpoints registered\")\n        except Exception as e:\n            logger.error(f\"Error registering monitoring API: {e}\")\n    \n    def start_monitoring(self):\n        \"\"\"Start all monitoring services\"\"\"\n        try:\n            if self.apm_service:\n                self.apm_service.start_monitoring()\n            \n            if self.infrastructure_monitor:\n                self.infrastructure_monitor.start_monitoring()\n            \n            if self.alerting_service:\n                self.alerting_service.start_processing()\n            \n            logger.info(\"All monitoring services started\")\n            \n            # Create startup alert\n            if self.alerting_service:\n                self.alerting_service.create_alert(\n                    alert_name=\"System Startup\",\n                    description=\"BDC monitoring system has been started\",\n                    severity=AlertSeverity.LOW,\n                    source=\"monitoring_system\",\n                    labels={'event': 'startup', 'component': 'monitoring'}\n                )\n                \n        except Exception as e:\n            logger.error(f\"Error starting monitoring services: {e}\")\n            raise\n    \n    def stop_monitoring(self):\n        \"\"\"Stop all monitoring services\"\"\"\n        try:\n            if self.apm_service:\n                self.apm_service.stop_monitoring()\n            \n            if self.infrastructure_monitor:\n                self.infrastructure_monitor.stop_monitoring()\n            \n            if self.alerting_service:\n                self.alerting_service.stop_processing()\n            \n            logger.info(\"All monitoring services stopped\")\n            \n        except Exception as e:\n            logger.error(f\"Error stopping monitoring services: {e}\")\n    \n    def get_system_status(self) -> dict:\n        \"\"\"Get overall monitoring system status\"\"\"\n        status = {\n            'timestamp': '2024-01-01T00:00:00Z',  # Would be datetime.utcnow().isoformat()\n            'overall_status': 'healthy',\n            'services': {\n                'apm': {\n                    'enabled': self.config['apm_enabled'],\n                    'running': self.apm_service and self.apm_service._monitoring_active if self.apm_service else False,\n                    'status': 'healthy' if self.apm_service else 'disabled'\n                },\n                'infrastructure': {\n                    'enabled': self.config['infrastructure_enabled'],\n                    'running': self.infrastructure_monitor and self.infrastructure_monitor._monitoring_active if self.infrastructure_monitor else False,\n                    'status': 'healthy' if self.infrastructure_monitor else 'disabled'\n                },\n                'alerting': {\n                    'enabled': self.config['alerting_enabled'],\n                    'running': self.alerting_service and self.alerting_service._processing_active if self.alerting_service else False,\n                    'status': 'healthy' if self.alerting_service else 'disabled'\n                }\n            },\n            'configuration': self.config.copy()\n        }\n        \n        # Determine overall status\n        service_statuses = [service['status'] for service in status['services'].values()]\n        if any(s == 'unhealthy' for s in service_statuses):\n            status['overall_status'] = 'unhealthy'\n        elif any(s == 'degraded' for s in service_statuses):\n            status['overall_status'] = 'degraded'\n        \n        return status\n    \n    def create_test_alert(self, severity: str = 'medium'):\n        \"\"\"Create a test alert for verification\"\"\"\n        if not self.alerting_service:\n            raise ValueError(\"Alerting service not available\")\n        \n        try:\n            severity_enum = AlertSeverity(severity.lower())\n        except ValueError:\n            raise ValueError(f\"Invalid severity: {severity}\")\n        \n        alert_id = self.alerting_service.create_alert(\n            alert_name=\"Test Alert\",\n            description=f\"This is a test alert with {severity} severity\",\n            severity=severity_enum,\n            source=\"monitoring_system\",\n            labels={'test': 'true', 'component': 'monitoring'},\n            annotations={'created_by': 'test_function'}\n        )\n        \n        logger.info(f\"Test alert created with ID: {alert_id}\")\n        return alert_id\n\n\n# Global monitoring system instance\nmonitoring_system: Optional[MonitoringSystem] = None\n\n\ndef init_monitoring_system(app: Flask, redis_client: Optional[redis.Redis] = None) -> MonitoringSystem:\n    \"\"\"Initialize the comprehensive monitoring system\"\"\"\n    global monitoring_system\n    \n    monitoring_system = MonitoringSystem(app, redis_client)\n    \n    # Add CLI commands\n    @app.cli.command()\n    def monitoring_status():\n        \"\"\"Show monitoring system status\"\"\"\n        if monitoring_system:\n            status = monitoring_system.get_system_status()\n            print(f\"Monitoring System Status: {status['overall_status']}\")\n            print(\"\\nServices:\")\n            for service_name, service_info in status['services'].items():\n                print(f\"  {service_name}: {service_info['status']} (enabled: {service_info['enabled']}, running: {service_info['running']})\")\n        else:\n            print(\"Monitoring system not initialized\")\n    \n    @app.cli.command()\n    def monitoring_test_alert():\n        \"\"\"Create a test alert\"\"\"\n        if monitoring_system:\n            try:\n                alert_id = monitoring_system.create_test_alert('medium')\n                print(f\"Test alert created successfully: {alert_id}\")\n            except Exception as e:\n                print(f\"Failed to create test alert: {e}\")\n        else:\n            print(\"Monitoring system not initialized\")\n    \n    @app.cli.command()\n    def monitoring_restart():\n        \"\"\"Restart monitoring services\"\"\"\n        if monitoring_system:\n            try:\n                monitoring_system.stop_monitoring()\n                monitoring_system.start_monitoring()\n                print(\"Monitoring services restarted successfully\")\n            except Exception as e:\n                print(f\"Failed to restart monitoring services: {e}\")\n        else:\n            print(\"Monitoring system not initialized\")\n    \n    return monitoring_system\n\n\ndef get_monitoring_system() -> Optional[MonitoringSystem]:\n    \"\"\"Get the global monitoring system instance\"\"\"\n    return monitoring_system"