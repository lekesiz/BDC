"""
Comprehensive Monitoring API Endpoints
Provides access to APM, Infrastructure, and Alerting data
"""

from flask import Blueprint, jsonify, request\nfrom datetime import datetime, timedelta\nfrom typing import Dict, Any, Optional\nimport time\n\nfrom app.utils.logging import logger\nfrom app.services.apm_service import APMService\nfrom app.services.infrastructure_monitoring import InfrastructureMonitor\nfrom app.services.alerting_service import AlertingService, AlertSeverity, AlertStatus\n\n# Create blueprint\nmonitoring_bp = Blueprint('monitoring', __name__, url_prefix='/api/monitoring')\n\n# Global service instances (will be injected by app)\napm_service: Optional[APMService] = None\ninfra_monitor: Optional[InfrastructureMonitor] = None\nalerting_service: Optional[AlertingService] = None\n\n\ndef init_monitoring_api(app, apm: APMService, infra: InfrastructureMonitor, alerts: AlertingService):\n    \"\"\"Initialize monitoring API with service instances\"\"\"\n    global apm_service, infra_monitor, alerting_service\n    apm_service = apm\n    infra_monitor = infra\n    alerting_service = alerts\n    \n    app.register_blueprint(monitoring_bp)\n    logger.info(\"Monitoring API initialized\")\n\n\n# APM Endpoints\n@monitoring_bp.route('/apm/summary', methods=['GET'])\ndef apm_summary():\n    \"\"\"Get APM performance summary\"\"\"\n    try:\n        hours = request.args.get('hours', 1, type=int)\n        \n        if not apm_service:\n            return jsonify({'error': 'APM service not available'}), 503\n        \n        summary = apm_service.get_performance_summary(hours=hours)\n        \n        return jsonify({\n            'status': 'success',\n            'data': summary\n        }), 200\n        \n    except Exception as e:\n        logger.error(f\"Error getting APM summary: {e}\")\n        return jsonify({'error': str(e)}), 500\n\n\n@monitoring_bp.route('/apm/endpoints', methods=['GET'])\ndef apm_endpoints():\n    \"\"\"Get performance metrics for all endpoints\"\"\"\n    try:\n        if not apm_service:\n            return jsonify({'error': 'APM service not available'}), 503\n        \n        endpoint_stats = {}\n        for endpoint_name in apm_service.endpoint_stats.keys():\n            endpoint_stats[endpoint_name] = apm_service.get_endpoint_metrics(endpoint_name)\n        \n        return jsonify({\n            'status': 'success',\n            'data': {\n                'endpoints': endpoint_stats,\n                'timestamp': datetime.utcnow().isoformat()\n            }\n        }), 200\n        \n    except Exception as e:\n        logger.error(f\"Error getting endpoint metrics: {e}\")\n        return jsonify({'error': str(e)}), 500\n\n\n@monitoring_bp.route('/apm/endpoints/<endpoint_name>', methods=['GET'])\ndef apm_endpoint_detail(endpoint_name: str):\n    \"\"\"Get detailed metrics for specific endpoint\"\"\"\n    try:\n        if not apm_service:\n            return jsonify({'error': 'APM service not available'}), 503\n        \n        metrics = apm_service.get_endpoint_metrics(endpoint_name)\n        \n        if 'error' in metrics:\n            return jsonify({'error': metrics['error']}), 404\n        \n        return jsonify({\n            'status': 'success',\n            'data': {\n                'endpoint': endpoint_name,\n                'metrics': metrics,\n                'timestamp': datetime.utcnow().isoformat()\n            }\n        }), 200\n        \n    except Exception as e:\n        logger.error(f\"Error getting endpoint detail: {e}\")\n        return jsonify({'error': str(e)}), 500\n\n\n@monitoring_bp.route('/apm/database', methods=['GET'])\ndef apm_database_metrics():\n    \"\"\"Get database performance metrics\"\"\"\n    try:\n        if not apm_service:\n            return jsonify({'error': 'APM service not available'}), 503\n        \n        return jsonify({\n            'status': 'success',\n            'data': {\n                'statistics': apm_service.database_stats,\n                'slow_queries': list(apm_service.database_stats['slow_queries']),\n                'timestamp': datetime.utcnow().isoformat()\n            }\n        }), 200\n        \n    except Exception as e:\n        logger.error(f\"Error getting database metrics: {e}\")\n        return jsonify({'error': str(e)}), 500\n\n\n# Infrastructure Endpoints\n@monitoring_bp.route('/infrastructure/summary', methods=['GET'])\ndef infrastructure_summary():\n    \"\"\"Get infrastructure monitoring summary\"\"\"\n    try:\n        hours = request.args.get('hours', 1, type=int)\n        \n        if not infra_monitor:\n            return jsonify({'error': 'Infrastructure monitor not available'}), 503\n        \n        summary = infra_monitor.get_infrastructure_summary(hours=hours)\n        \n        return jsonify({\n            'status': 'success',\n            'data': summary\n        }), 200\n        \n    except Exception as e:\n        logger.error(f\"Error getting infrastructure summary: {e}\")\n        return jsonify({'error': str(e)}), 500\n\n\n@monitoring_bp.route('/infrastructure/server', methods=['GET'])\ndef infrastructure_server_metrics():\n    \"\"\"Get current server metrics\"\"\"\n    try:\n        if not infra_monitor:\n            return jsonify({'error': 'Infrastructure monitor not available'}), 503\n        \n        # Get latest server metrics\n        latest_metrics = None\n        if infra_monitor.server_metrics:\n            latest_metrics = infra_monitor.server_metrics[-1]\n        \n        return jsonify({\n            'status': 'success',\n            'data': {\n                'current': latest_metrics.__dict__ if latest_metrics else None,\n                'thresholds': infra_monitor.thresholds,\n                'timestamp': datetime.utcnow().isoformat()\n            }\n        }), 200\n        \n    except Exception as e:\n        logger.error(f\"Error getting server metrics: {e}\")\n        return jsonify({'error': str(e)}), 500\n\n\n@monitoring_bp.route('/infrastructure/network', methods=['GET'])\ndef infrastructure_network_metrics():\n    \"\"\"Get network connectivity and latency metrics\"\"\"\n    try:\n        if not infra_monitor:\n            return jsonify({'error': 'Infrastructure monitor not available'}), 503\n        \n        # Get recent network metrics\n        recent_metrics = list(infra_monitor.network_metrics)[-10:]  # Last 10 measurements\n        \n        return jsonify({\n            'status': 'success',\n            'data': {\n                'recent_measurements': [metric.__dict__ for metric in recent_metrics],\n                'targets': infra_monitor.network_targets,\n                'thresholds': {\n                    'latency_warning': infra_monitor.thresholds['network_latency_warning'],\n                    'latency_critical': infra_monitor.thresholds['network_latency_critical'],\n                    'packet_loss_warning': infra_monitor.thresholds['packet_loss_warning'],\n                    'packet_loss_critical': infra_monitor.thresholds['packet_loss_critical']\n                },\n                'timestamp': datetime.utcnow().isoformat()\n            }\n        }), 200\n        \n    except Exception as e:\n        logger.error(f\"Error getting network metrics: {e}\")\n        return jsonify({'error': str(e)}), 500\n\n\n@monitoring_bp.route('/infrastructure/containers', methods=['GET'])\ndef infrastructure_container_metrics():\n    \"\"\"Get Docker container metrics\"\"\"\n    try:\n        if not infra_monitor:\n            return jsonify({'error': 'Infrastructure monitor not available'}), 503\n        \n        # Get recent container metrics\n        recent_metrics = list(infra_monitor.container_metrics)[-20:]  # Last 20 measurements\n        \n        return jsonify({\n            'status': 'success',\n            'data': {\n                'recent_metrics': [metric.__dict__ for metric in recent_metrics],\n                'docker_available': infra_monitor.docker_client is not None,\n                'timestamp': datetime.utcnow().isoformat()\n            }\n        }), 200\n        \n    except Exception as e:\n        logger.error(f\"Error getting container metrics: {e}\")\n        return jsonify({'error': str(e)}), 500\n\n\n@monitoring_bp.route('/infrastructure/storage', methods=['GET'])\ndef infrastructure_storage_metrics():\n    \"\"\"Get storage usage metrics\"\"\"\n    try:\n        if not infra_monitor:\n            return jsonify({'error': 'Infrastructure monitor not available'}), 503\n        \n        # Get latest storage metrics\n        latest_storage = None\n        if infra_monitor.storage_metrics:\n            latest_storage = infra_monitor.storage_metrics[-1]\n        \n        return jsonify({\n            'status': 'success',\n            'data': {\n                'current': latest_storage,\n                'thresholds': {\n                    'warning': infra_monitor.thresholds['disk_warning'],\n                    'critical': infra_monitor.thresholds['disk_critical']\n                },\n                'timestamp': datetime.utcnow().isoformat()\n            }\n        }), 200\n        \n    except Exception as e:\n        logger.error(f\"Error getting storage metrics: {e}\")\n        return jsonify({'error': str(e)}), 500\n\n\n# Alerting Endpoints\n@monitoring_bp.route('/alerts/active', methods=['GET'])\ndef get_active_alerts():\n    \"\"\"Get active alerts\"\"\"\n    try:\n        severity = request.args.get('severity')\n        \n        if not alerting_service:\n            return jsonify({'error': 'Alerting service not available'}), 503\n        \n        # Convert severity string to enum if provided\n        severity_filter = None\n        if severity:\n            try:\n                severity_filter = AlertSeverity(severity.lower())\n            except ValueError:\n                return jsonify({'error': f'Invalid severity: {severity}'}), 400\n        \n        alerts = alerting_service.get_active_alerts(severity=severity_filter)\n        \n        # Convert alerts to dictionaries\n        alerts_data = []\n        for alert in alerts:\n            alert_dict = alert.__dict__.copy()\n            alert_dict['severity'] = alert.severity.value\n            alert_dict['status'] = alert.status.value\n            alerts_data.append(alert_dict)\n        \n        return jsonify({\n            'status': 'success',\n            'data': {\n                'alerts': alerts_data,\n                'count': len(alerts_data),\n                'timestamp': datetime.utcnow().isoformat()\n            }\n        }), 200\n        \n    except Exception as e:\n        logger.error(f\"Error getting active alerts: {e}\")\n        return jsonify({'error': str(e)}), 500\n\n\n@monitoring_bp.route('/alerts/summary', methods=['GET'])\ndef get_alert_summary():\n    \"\"\"Get alert summary statistics\"\"\"\n    try:\n        if not alerting_service:\n            return jsonify({'error': 'Alerting service not available'}), 503\n        \n        summary = alerting_service.get_alert_summary()\n        \n        return jsonify({\n            'status': 'success',\n            'data': summary\n        }), 200\n        \n    except Exception as e:\n        logger.error(f\"Error getting alert summary: {e}\")\n        return jsonify({'error': str(e)}), 500\n\n\n@monitoring_bp.route('/alerts/<alert_id>/acknowledge', methods=['POST'])\ndef acknowledge_alert(alert_id: str):\n    \"\"\"Acknowledge an alert\"\"\"\n    try:\n        if not alerting_service:\n            return jsonify({'error': 'Alerting service not available'}), 503\n        \n        data = request.get_json() or {}\n        acknowledged_by = data.get('acknowledged_by', 'unknown')\n        \n        success = alerting_service.acknowledge_alert(alert_id, acknowledged_by)\n        \n        if success:\n            return jsonify({\n                'status': 'success',\n                'message': 'Alert acknowledged successfully'\n            }), 200\n        else:\n            return jsonify({'error': 'Alert not found'}), 404\n            \n    except Exception as e:\n        logger.error(f\"Error acknowledging alert: {e}\")\n        return jsonify({'error': str(e)}), 500\n\n\n@monitoring_bp.route('/alerts/<alert_id>/resolve', methods=['POST'])\ndef resolve_alert(alert_id: str):\n    \"\"\"Resolve an alert\"\"\"\n    try:\n        if not alerting_service:\n            return jsonify({'error': 'Alerting service not available'}), 503\n        \n        success = alerting_service.resolve_alert(alert_id)\n        \n        if success:\n            return jsonify({\n                'status': 'success',\n                'message': 'Alert resolved successfully'\n            }), 200\n        else:\n            return jsonify({'error': 'Alert not found'}), 404\n            \n    except Exception as e:\n        logger.error(f\"Error resolving alert: {e}\")\n        return jsonify({'error': str(e)}), 500\n\n\n@monitoring_bp.route('/alerts/create', methods=['POST'])\ndef create_alert():\n    \"\"\"Create a new alert\"\"\"\n    try:\n        if not alerting_service:\n            return jsonify({'error': 'Alerting service not available'}), 503\n        \n        data = request.get_json()\n        if not data:\n            return jsonify({'error': 'Request data required'}), 400\n        \n        # Validate required fields\n        required_fields = ['name', 'description', 'severity', 'source']\n        for field in required_fields:\n            if field not in data:\n                return jsonify({'error': f'Missing required field: {field}'}), 400\n        \n        # Convert severity string to enum\n        try:\n            severity = AlertSeverity(data['severity'].lower())\n        except ValueError:\n            return jsonify({'error': f'Invalid severity: {data[\"severity\"]}'}), 400\n        \n        alert_id = alerting_service.create_alert(\n            alert_name=data['name'],\n            description=data['description'],\n            severity=severity,\n            source=data['source'],\n            labels=data.get('labels', {}),\n            annotations=data.get('annotations', {})\n        )\n        \n        if alert_id:\n            return jsonify({\n                'status': 'success',\n                'data': {'alert_id': alert_id},\n                'message': 'Alert created successfully'\n            }), 201\n        else:\n            return jsonify({\n                'status': 'info',\n                'message': 'Alert was suppressed or already exists'\n            }), 200\n            \n    except Exception as e:\n        logger.error(f\"Error creating alert: {e}\")\n        return jsonify({'error': str(e)}), 500\n\n\n# Health Check Endpoints\n@monitoring_bp.route('/health', methods=['GET'])\ndef monitoring_health():\n    \"\"\"Health check for monitoring services\"\"\"\n    try:\n        health_status = {\n            'monitoring_api': 'healthy',\n            'apm_service': 'healthy' if apm_service else 'unavailable',\n            'infrastructure_monitor': 'healthy' if infra_monitor else 'unavailable',\n            'alerting_service': 'healthy' if alerting_service else 'unavailable',\n            'timestamp': datetime.utcnow().isoformat()\n        }\n        \n        # Check if monitoring threads are running\n        if apm_service and not apm_service._monitoring_active:\n            health_status['apm_service'] = 'stopped'\n        \n        if infra_monitor and not infra_monitor._monitoring_active:\n            health_status['infrastructure_monitor'] = 'stopped'\n        \n        if alerting_service and not alerting_service._processing_active:\n            health_status['alerting_service'] = 'stopped'\n        \n        # Determine overall status\n        overall_status = 'healthy'\n        if any(status in ['unavailable', 'stopped'] for status in health_status.values() if status != health_status['timestamp']):\n            overall_status = 'degraded'\n        \n        health_status['overall_status'] = overall_status\n        \n        return jsonify({\n            'status': 'success',\n            'data': health_status\n        }), 200 if overall_status == 'healthy' else 503\n        \n    except Exception as e:\n        logger.error(f\"Error checking monitoring health: {e}\")\n        return jsonify({'error': str(e)}), 500\n\n\n# Configuration Endpoints\n@monitoring_bp.route('/config/thresholds', methods=['GET'])\ndef get_monitoring_thresholds():\n    \"\"\"Get current monitoring thresholds\"\"\"\n    try:\n        thresholds = {}\n        \n        if apm_service:\n            thresholds['apm'] = apm_service.thresholds\n        \n        if infra_monitor:\n            thresholds['infrastructure'] = infra_monitor.thresholds\n        \n        return jsonify({\n            'status': 'success',\n            'data': {\n                'thresholds': thresholds,\n                'timestamp': datetime.utcnow().isoformat()\n            }\n        }), 200\n        \n    except Exception as e:\n        logger.error(f\"Error getting thresholds: {e}\")\n        return jsonify({'error': str(e)}), 500\n\n\n@monitoring_bp.route('/config/notification-channels', methods=['GET'])\ndef get_notification_channels():\n    \"\"\"Get configured notification channels\"\"\"\n    try:\n        if not alerting_service:\n            return jsonify({'error': 'Alerting service not available'}), 503\n        \n        channels = {}\n        for name, channel in alerting_service.notification_channels.items():\n            channels[name] = {\n                'name': channel.name,\n                'type': channel.type,\n                'enabled': channel.enabled,\n                'severity_filter': [s.value for s in channel.severity_filter] if channel.severity_filter else None\n            }\n        \n        return jsonify({\n            'status': 'success',\n            'data': {\n                'channels': channels,\n                'timestamp': datetime.utcnow().isoformat()\n            }\n        }), 200\n        \n    except Exception as e:\n        logger.error(f\"Error getting notification channels: {e}\")\n        return jsonify({'error': str(e)}), 500\n\n\n# Real-time metrics endpoint for dashboard\n@monitoring_bp.route('/realtime', methods=['GET'])\ndef get_realtime_metrics():\n    \"\"\"Get real-time metrics for dashboard\"\"\"\n    try:\n        metrics = {\n            'timestamp': datetime.utcnow().isoformat(),\n            'system': {},\n            'application': {},\n            'infrastructure': {},\n            'alerts': {'active_count': 0, 'critical_count': 0}\n        }\n        \n        # Get APM metrics\n        if apm_service:\n            apm_summary = apm_service.get_performance_summary(hours=1)\n            metrics['application'] = {\n                'requests_per_hour': apm_summary.get('requests', {}).get('total', 0),\n                'average_response_time': apm_summary.get('requests', {}).get('average_response_time', 0),\n                'error_rate': apm_summary.get('requests', {}).get('error_rate', 0),\n                'database_queries': apm_summary.get('database', {}).get('total_queries', 0),\n                'slow_queries': apm_summary.get('database', {}).get('slow_queries_count', 0)\n            }\n        \n        # Get infrastructure metrics\n        if infra_monitor:\n            if infra_monitor.server_metrics:\n                latest_server = infra_monitor.server_metrics[-1]\n                metrics['infrastructure'] = {\n                    'cpu_percent': latest_server.cpu_percent,\n                    'memory_percent': latest_server.memory_percent,\n                    'disk_percent': latest_server.disk_percent,\n                    'network_connections': latest_server.active_connections,\n                    'load_average': latest_server.load_average\n                }\n        \n        # Get alert counts\n        if alerting_service:\n            active_alerts = alerting_service.get_active_alerts()\n            metrics['alerts'] = {\n                'active_count': len(active_alerts),\n                'critical_count': len([a for a in active_alerts if a.severity == AlertSeverity.CRITICAL]),\n                'high_count': len([a for a in active_alerts if a.severity == AlertSeverity.HIGH])\n            }\n        \n        return jsonify({\n            'status': 'success',\n            'data': metrics\n        }), 200\n        \n    except Exception as e:\n        logger.error(f\"Error getting real-time metrics: {e}\")\n        return jsonify({'error': str(e)}), 500\n\n\n# Historical data endpoint\n@monitoring_bp.route('/historical', methods=['GET'])\ndef get_historical_metrics():\n    \"\"\"Get historical metrics data\"\"\"\n    try:\n        hours = request.args.get('hours', 24, type=int)\n        metric_type = request.args.get('type', 'all')\n        \n        # Limit to reasonable range\n        hours = min(hours, 168)  # Max 1 week\n        \n        cutoff_time = time.time() - (hours * 3600)\n        \n        historical_data = {\n            'timestamp': datetime.utcnow().isoformat(),\n            'period_hours': hours,\n            'metrics': {}\n        }\n        \n        # Get server metrics\n        if infra_monitor and (metric_type == 'all' or metric_type == 'server'):\n            server_data = [\n                {\n                    'timestamp': metric.timestamp,\n                    'cpu_percent': metric.cpu_percent,\n                    'memory_percent': metric.memory_percent,\n                    'disk_percent': metric.disk_percent\n                }\n                for metric in infra_monitor.server_metrics\n                if metric.timestamp > cutoff_time\n            ]\n            historical_data['metrics']['server'] = server_data\n        \n        # Get application metrics from APM\n        if apm_service and (metric_type == 'all' or metric_type == 'application'):\n            app_data = []\n            for request_metric in apm_service.request_metrics:\n                if request_metric.get('end_time', 0) > cutoff_time:\n                    app_data.append({\n                        'timestamp': request_metric.get('end_time'),\n                        'response_time': request_metric.get('duration_ms'),\n                        'successful': request_metric.get('successful', False),\n                        'endpoint': request_metric.get('endpoint')\n                    })\n            historical_data['metrics']['application'] = app_data\n        \n        return jsonify({\n            'status': 'success',\n            'data': historical_data\n        }), 200\n        \n    except Exception as e:\n        logger.error(f\"Error getting historical metrics: {e}\")\n        return jsonify({'error': str(e)}), 500"