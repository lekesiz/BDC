# Multi-stage optimized Dockerfile for BDC Backend
# Supports both development and production builds

ARG PYTHON_VERSION=3.11
ARG BUILD_ENV=production

# ===============================
# Base Stage - Common Dependencies
# ===============================
FROM python:${PYTHON_VERSION}-slim as base

# Set environment variables
ENV PYTHONUNBUFFERED=1 \
    PYTHONDONTWRITEBYTECODE=1 \
    PIP_NO_CACHE_DIR=1 \
    PIP_DISABLE_PIP_VERSION_CHECK=1 \
    DEBIAN_FRONTEND=noninteractive

# Install system dependencies
RUN apt-get update && apt-get install -y --no-install-recommends \
    curl \
    build-essential \
    libpq-dev \
    && rm -rf /var/lib/apt/lists/*

# Create app user
RUN groupadd -r appuser && useradd -r -g appuser appuser

# Create directories
RUN mkdir -p /app /app/logs /app/uploads \
    && chown -R appuser:appuser /app

WORKDIR /app

# ===============================
# Dependencies Stage
# ===============================
FROM base as dependencies

# Copy requirements
COPY requirements.txt requirements-production.txt ./

# Install Python dependencies with cache mount
RUN --mount=type=cache,target=/root/.cache/pip \
    pip install --upgrade pip setuptools wheel && \
    pip install -r requirements-production.txt

# ===============================
# Development Stage
# ===============================
FROM dependencies as development

# Install development dependencies
RUN --mount=type=cache,target=/root/.cache/pip \
    pip install \
    pytest \
    pytest-flask \
    pytest-cov \
    factory-boy \
    flask-shell-ipython \
    ipython \
    debugpy

# Copy application code
COPY --chown=appuser:appuser . .

# Switch to app user
USER appuser

# Development environment variables
ENV FLASK_ENV=development \
    FLASK_DEBUG=1 \
    LOG_LEVEL=DEBUG

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=30s --retries=3 \
    CMD curl -f http://localhost:5000/api/health || exit 1

# Expose port
EXPOSE 5000

# Development command with hot reload
CMD ["python", "-m", "flask", "run", "--host=0.0.0.0", "--port=5000", "--reload"]

# ===============================
# Production Build Stage
# ===============================
FROM dependencies as builder

# Copy source code
COPY . .

# Remove development files
RUN rm -rf \
    tests/ \
    pytest.ini \
    .pytest_cache/ \
    htmlcov/ \
    *.test.* \
    test_*.py

# Compile Python files
RUN python -m compileall .

# ===============================
# Production Stage
# ===============================
FROM base as production

# Install only runtime dependencies
RUN --mount=type=cache,target=/var/lib/apt/lists \
    apt-get update && apt-get install -y --no-install-recommends \
    libpq5 \
    curl \
    && rm -rf /var/lib/apt/lists/*

# Copy Python dependencies from builder
COPY --from=dependencies /usr/local/lib/python${PYTHON_VERSION}/site-packages /usr/local/lib/python${PYTHON_VERSION}/site-packages
COPY --from=dependencies /usr/local/bin /usr/local/bin

# Copy application from builder
COPY --from=builder --chown=appuser:appuser /app /app

# Create health check script
COPY --chown=appuser:appuser <<EOF /usr/local/bin/healthcheck.sh
#!/bin/bash
set -eo pipefail
curl -f http://localhost:5000/api/health || exit 1
EOF

RUN chmod +x /usr/local/bin/healthcheck.sh

# Create startup script
COPY --chown=appuser:appuser <<EOF /usr/local/bin/start.sh
#!/bin/bash
set -eo pipefail

echo "Starting BDC Backend..."

# Run database migrations
echo "Running database migrations..."
flask db upgrade || {
    echo "Database migration failed, exiting..."
    exit 1
}

# Start the application
echo "Starting Gunicorn..."
exec gunicorn \
    --bind 0.0.0.0:5000 \
    --workers \${GUNICORN_WORKERS:-4} \
    --worker-class gevent \
    --worker-connections 1000 \
    --max-requests 10000 \
    --max-requests-jitter 1000 \
    --preload \
    --timeout 30 \
    --keep-alive 5 \
    --log-level info \
    --access-logfile - \
    --error-logfile - \
    --capture-output \
    wsgi:app
EOF

RUN chmod +x /usr/local/bin/start.sh

# Switch to app user
USER appuser

# Production environment variables
ENV FLASK_ENV=production \
    FLASK_DEBUG=0 \
    LOG_LEVEL=INFO \
    GUNICORN_WORKERS=4

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=45s --retries=3 \
    CMD /usr/local/bin/healthcheck.sh

# Expose port
EXPOSE 5000

# Production command
CMD ["/usr/local/bin/start.sh"]

# ===============================
# Multi-platform Support
# ===============================
FROM production as multi-platform

# Add platform-specific optimizations
ARG TARGETPLATFORM
RUN case "${TARGETPLATFORM}" in \
    "linux/amd64") echo "Optimizing for AMD64" ;; \
    "linux/arm64") echo "Optimizing for ARM64" ;; \
    *) echo "Using default configuration" ;; \
    esac

# ===============================
# Final Stage Selection
# ===============================
FROM ${BUILD_ENV} as final