#!/usr/bin/env python3
"""
Test script for JWT token validation in BDC server
"""

import sys
import os
from datetime import datetime

# Add parent directory to path to import server modules
sys.path.insert(0, os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

try:
    from flask import Flask
    from flask_jwt_extended import JWTManager, decode_token
    from server.config import Config
except ImportError as e:
    print(f"Import error: {e}")
    print("Make sure flask and flask_jwt_extended are installed:")
    print("pip install flask flask_jwt_extended")
    sys.exit(1)

# Create a minimal Flask app for JWT initialization
app = Flask(__name__)

# Configure JWT settings (use same secret as your server)
app.config['JWT_SECRET_KEY'] = Config.JWT_SECRET_KEY if hasattr(Config, 'JWT_SECRET_KEY') else 'your-secret-key-here'
app.config['JWT_ALGORITHM'] = 'HS256'

# Initialize JWT Manager
jwt = JWTManager(app)

def test_jwt_decode():
    """Test JWT token decoding"""
    
    # Hardcoded JWT token for testing (replace with actual token from localStorage)
    # This is a sample token - you'll need to replace it with a valid one from your app
    test_token = "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJmcmVzaCI6ZmFsc2UsImlhdCI6MTcwMDAwMDAwMCwianRpIjoiMTIzNDU2NzgtMTIzNC0xMjM0LTEyMzQtMTIzNDU2Nzg5MDEyIiwidHlwZSI6ImFjY2VzcyIsInN1YiI6InRlc3R1c2VyIiwibmJmIjoxNzAwMDAwMDAwLCJleHAiOjE3MDAwODY0MDB9.REPLACE_WITH_VALID_SIGNATURE"
    
    print("JWT Token Validation Test")
    print("=" * 50)
    print(f"Token to decode: {test_token[:50]}...")
    print()
    
    try:
        # Decode the token within app context
        with app.app_context():
            decoded = decode_token(test_token)
            
            print("✅ Token decoded successfully!")
            print("\nDecoded payload:")
            print("-" * 30)
            
            for key, value in decoded.items():
                # Format timestamps if present
                if key in ['iat', 'exp', 'nbf'] and isinstance(value, (int, float)):
                    timestamp = datetime.fromtimestamp(value)
                    print(f"  {key}: {value} ({timestamp})")
                else:
                    print(f"  {key}: {value}")
            
            # Check token expiration
            if 'exp' in decoded:
                exp_time = datetime.fromtimestamp(decoded['exp'])
                now = datetime.now()
                if exp_time > now:
                    print(f"\n✅ Token is valid until: {exp_time}")
                else:
                    print(f"\n❌ Token expired at: {exp_time}")
            
            # Check token type
            if 'type' in decoded:
                print(f"\nToken type: {decoded['type']}")
            
            # Extract user information
            if 'sub' in decoded:
                print(f"User ID/Username: {decoded['sub']}")
                
    except Exception as e:
        print(f"❌ Error decoding token: {type(e).__name__}")
        print(f"   Details: {str(e)}")
        print("\nPossible reasons:")
        print("  - Invalid token format")
        print("  - Token signature doesn't match the secret key")
        print("  - Token is expired")
        print("  - Missing required claims")
        
        # Try to provide more specific error handling
        if "Signature verification failed" in str(e):
            print("\n⚠️  The token signature doesn't match. Check that:")
            print("    - You're using the correct JWT_SECRET_KEY")
            print("    - The token was generated by your server")
        elif "Token has expired" in str(e):
            print("\n⚠️  The token has expired. Generate a new one.")
        elif "Invalid token" in str(e):
            print("\n⚠️  The token format is invalid.")

def main():
    """Main function"""
    print("BDC JWT Token Validation Test Script")
    print("=" * 50)
    print()
    
    # Test token decoding
    test_jwt_decode()
    
    print("\n" + "=" * 50)
    print("To test with your own token:")
    print("1. Copy a valid JWT token from your browser's localStorage")
    print("2. Replace the 'test_token' variable in this script")
    print("3. Run the script again")
    print("\nExample to get token from browser console:")
    print("  localStorage.getItem('access_token')")

if __name__ == "__main__":
    main()