version: '3.8'

services:
  redis:
    image: redis:alpine
    container_name: bdc_redis_dev
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - bdc_network

  postgres:
    image: postgres:14-alpine
    container_name: bdc_postgres_dev
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-bdc}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-bdc_password}
      POSTGRES_DB: ${POSTGRES_DB:-bdc_dev}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - bdc_network

  server:
    build:
      context: .
      dockerfile: ./docker/Dockerfile.server.dev
    container_name: bdc_server_dev
    restart: unless-stopped
    depends_on:
      - postgres
      - redis
    environment:
      - FLASK_ENV=development
      - FLASK_APP=wsgi.py
      - FLASK_DEBUG=1
      - DATABASE_URL=postgresql://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-postgres}@postgres:5432/${POSTGRES_DB:-bdc}
      - REDIS_URL=redis://redis:6379/0
      - SECRET_KEY=${SECRET_KEY:-dev_secret_key}
      - JWT_SECRET_KEY=${JWT_SECRET_KEY:-dev_jwt_secret_key}
      - CORS_ORIGINS=http://localhost:5173
    ports:
      - "5000:5000"
    volumes:
      - ./backend:/app
      - ./backend/uploads:/app/uploads
      - ./backend/logs:/app/logs
    networks:
      - bdc_network

  client:
    build:
      context: .
      dockerfile: ./docker/Dockerfile.client.dev
    container_name: bdc_client_dev
    restart: unless-stopped
    environment:
      - NODE_ENV=development
      - VITE_API_URL=http://localhost:5000/api
    ports:
      - "5173:5173"
    volumes:
      - ./client:/app
      - /app/node_modules
    networks:
      - bdc_network

networks:
  bdc_network:
    driver: bridge

volumes:
  postgres_data:
  redis_data: