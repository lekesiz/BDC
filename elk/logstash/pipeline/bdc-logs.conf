# ================================
# BDC Application Logs Pipeline
# ================================

input {
  # --------------------------------
  # Flask Application Logs
  # --------------------------------
  file {
    path => "/var/log/bdc/*.log"
    start_position => "beginning"
    sincedb_path => "/usr/share/logstash/data/sincedb_bdc_app"
    codec => json
    tags => ["bdc", "flask", "application"]
    type => "bdc-application"
  }

  # --------------------------------
  # Security Audit Logs
  # --------------------------------
  file {
    path => "/var/log/bdc/security/*.log"
    start_position => "beginning"
    sincedb_path => "/usr/share/logstash/data/sincedb_bdc_security"
    codec => json
    tags => ["bdc", "security", "audit"]
    type => "bdc-security"
  }

  # --------------------------------
  # Nginx Access Logs
  # --------------------------------
  file {
    path => "/var/log/nginx/access.log"
    start_position => "beginning"
    sincedb_path => "/usr/share/logstash/data/sincedb_nginx_access"
    tags => ["nginx", "access", "web"]
    type => "nginx-access"
  }

  # --------------------------------
  # Nginx Error Logs
  # --------------------------------
  file {
    path => "/var/log/nginx/error.log"
    start_position => "beginning"
    sincedb_path => "/usr/share/logstash/data/sincedb_nginx_error"
    tags => ["nginx", "error", "web"]
    type => "nginx-error"
  }

  # --------------------------------
  # Beats Input
  # --------------------------------
  beats {
    port => 5044
    tags => ["beats"]
  }

  # --------------------------------
  # Syslog Input
  # --------------------------------
  syslog {
    port => 5000
    tags => ["syslog"]
  }
}

filter {
  # --------------------------------
  # Parse Nginx Access Logs
  # --------------------------------
  if [type] == "nginx-access" {
    grok {
      match => { 
        "message" => "%{NGINXACCESS}" 
      }
    }

    date {
      match => [ "timestamp", "dd/MMM/yyyy:HH:mm:ss Z" ]
    }

    geoip {
      source => "clientip"
      target => "geoip"
    }

    mutate {
      convert => { 
        "response" => "integer"
        "bytes" => "integer"
        "responsetime" => "float"
      }
    }
  }

  # --------------------------------
  # Parse Flask Application Logs
  # --------------------------------
  if [type] == "bdc-application" {
    # Add application-specific parsing
    if [level] {
      mutate {
        uppercase => [ "level" ]
      }
    }

    if [request_id] {
      mutate {
        add_field => { "correlation_id" => "%{request_id}" }
      }
    }

    if [user_id] {
      mutate {
        add_field => { "user_context" => "%{user_id}" }
      }
    }
  }

  # --------------------------------
  # Parse Security Logs
  # --------------------------------
  if [type] == "bdc-security" {
    if [event_type] {
      mutate {
        add_field => { "security_event" => "%{event_type}" }
      }
    }

    if [risk_level] {
      mutate {
        add_field => { "risk_score" => "%{risk_level}" }
      }
    }

    # Alert on high-risk security events
    if [risk_level] == "critical" or [risk_level] == "high" {
      mutate {
        add_tag => [ "security_alert" ]
      }
    }
  }

  # --------------------------------
  # Common Field Processing
  # --------------------------------
  # Add timestamp if missing
  if ![timestamp] {
    ruby {
      code => "event.set('timestamp', Time.now.iso8601)"
    }
  }

  # Add environment information
  mutate {
    add_field => { 
      "environment" => "${BDC_ENVIRONMENT:production}"
      "service" => "bdc"
      "version" => "${BDC_VERSION:1.0.0}"
    }
  }

  # Clean up fields
  mutate {
    remove_field => [ "host", "agent", "ecs", "input", "log" ]
  }
}

output {
  # --------------------------------
  # Elasticsearch Output
  # --------------------------------
  elasticsearch {
    hosts => ["http://elasticsearch:9200"]
    
    # Index based on log type and date
    index => "bdc-%{type}-%{+YYYY.MM.dd}"
    
    # Use document type for routing
    template_name => "bdc-logs"
    template => "/usr/share/logstash/templates/bdc-template.json"
    template_overwrite => true
    
    # Enable ILM
    ilm_enabled => true
    ilm_rollover_alias => "bdc-logs"
    ilm_pattern => "{now/d}-000001"
    ilm_policy => "bdc-logs-policy"
  }

  # --------------------------------
  # Debug Output (Development)
  # --------------------------------
  if "${LOGSTASH_DEBUG:false}" == "true" {
    stdout {
      codec => rubydebug
    }
  }

  # --------------------------------
  # Alert Output for Critical Events
  # --------------------------------
  if "security_alert" in [tags] {
    http {
      url => "${ALERT_WEBHOOK_URL:http://localhost:3001/alerts}"
      http_method => "post"
      format => "json"
      headers => {
        "Content-Type" => "application/json"
        "Authorization" => "Bearer ${ALERT_API_KEY:demo-key}"
      }
    }
  }
}